{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJECTS\\\\PERSONAL PROJECTS\\\\New folder (2)\\\\veuz\\\\src\\\\Components\\\\AllQuestions.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport formData from \"../JSON/formData.json\";\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AllQuestions = () => {\n  _s();\n  const {\n    formId\n  } = useParams();\n  const form = formData[formId];\n  const questions = form === null || form === void 0 ? void 0 : form.fields;\n  const [answers, setAnswers] = useState({});\n  const [errors, setErrors] = useState({});\n  const validateField = (question, value) => {\n    if (question.required && !value) {\n      return \"This field is required.\";\n    }\n    if (question.type === 'email' && value) {\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailRegex.test(value)) {\n        return \"Please enter a valid email address.\";\n      }\n    }\n    if (question.type === 'textbox' && value) {\n      const textRegex = /^[a-zA-Z\\s]*$/;\n      if (!textRegex.test(value)) {\n        return \"Only alphabets and spaces are allowed.\";\n      }\n    }\n    if (question.type === 'date' && value) {\n      const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/; // YYYY-MM-DD format\n      if (!dateRegex.test(value)) {\n        return \"Please enter a valid date.\";\n      }\n    }\n    if (question.type === 'textarea' && question.required && !value) {\n      return \"This field is required.\"; // Add validation for textarea (required check)\n    }\n    return null;\n  };\n  const handleChange = (fieldId, value) => {\n    setAnswers({\n      ...answers,\n      [fieldId]: value\n    });\n\n    // Validate the field on change\n    const question = questions.find(q => q.fieldId === fieldId);\n    const error = validateField(question, value);\n    setErrors({\n      ...errors,\n      [fieldId]: error\n    });\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    // Validate all fields on submit\n    const newErrors = {};\n    questions.forEach(question => {\n      const value = answers[question.fieldId];\n      const error = validateField(question, value);\n      if (error) {\n        newErrors[question.fieldId] = error;\n      }\n    });\n    setErrors(newErrors);\n    if (Object.keys(newErrors).length === 0) {\n      console.log(\"Selected Answers:\", answers);\n      alert(\"Form submitted successfully!\");\n    } else {\n      alert(\"Please fix the errors before submitting.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container my-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-center mb-4\",\n      children: \"All Questions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"row\",\n      children: [questions.map(question => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-12 col-md-6 mb-4\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card shadow-sm p-3 h-100\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"form-label fw-bold\",\n            children: question.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 29\n          }, this), question.type === 'textbox' && /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: `form-control ${errors[question.fieldId] ? 'is-invalid' : ''}`,\n            placeholder: question.placeholder,\n            onChange: e => handleChange(question.fieldId, e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 33\n          }, this), question.type === 'email' && /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            className: `form-control ${errors[question.fieldId] ? 'is-invalid' : ''}`,\n            placeholder: question.placeholder,\n            onChange: e => handleChange(question.fieldId, e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 33\n          }, this), question.type === 'date' && /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            className: `form-control ${errors[question.fieldId] ? 'is-invalid' : ''}`,\n            onChange: e => handleChange(question.fieldId, e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 33\n          }, this), question.type === 'radio' && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: question.options.map(option => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-check\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                className: `form-check-input ${errors[question.fieldId] ? 'is-invalid' : ''}`,\n                type: \"radio\",\n                name: question.fieldId,\n                value: option.label,\n                onChange: () => handleChange(question.fieldId, option.label)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"form-check-label\",\n                children: option.label\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 45\n              }, this)]\n            }, option.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 41\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 33\n          }, this), question.type === 'checkbox' && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: question.options.map(option => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-check\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                className: `form-check-input ${errors[question.fieldId] ? 'is-invalid' : ''}`,\n                type: \"checkbox\",\n                name: question.fieldId,\n                value: option.label,\n                onChange: e => {\n                  const currentAnswers = answers[question.fieldId] || [];\n                  if (e.target.checked) {\n                    handleChange(question.fieldId, [...currentAnswers, option.label]);\n                  } else {\n                    handleChange(question.fieldId, currentAnswers.filter(item => item !== option.label));\n                  }\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 130,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"form-check-label\",\n                children: option.label\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 147,\n                columnNumber: 45\n              }, this)]\n            }, option.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 41\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 33\n          }, this), question.type === 'selectbox' && /*#__PURE__*/_jsxDEV(\"select\", {\n            className: `form-select ${errors[question.fieldId] ? 'is-invalid' : ''}`,\n            onChange: e => handleChange(question.fieldId, e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: question.placeholder\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 37\n            }, this), question.options.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: option.label,\n              children: option.label\n            }, option.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 41\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 33\n          }, this), question.type === 'textarea' && /*#__PURE__*/_jsxDEV(\"textarea\", {\n            className: `form-control ${errors[question.fieldId] ? 'is-invalid' : ''}`,\n            placeholder: question.placeholder,\n            onChange: e => handleChange(question.fieldId, e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 33\n          }, this), errors[question.fieldId] && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-danger mt-1\",\n            children: errors[question.fieldId]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 25\n        }, this)\n      }, question.fieldId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-12 text-center mt-4\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn btn-primary px-5\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n};\n_s(AllQuestions, \"pN7/nkcMAp9oqmMH9JxVVfaRX44=\", false, function () {\n  return [useParams];\n});\n_c = AllQuestions;\nexport default AllQuestions;\nvar _c;\n$RefreshReg$(_c, \"AllQuestions\");","map":{"version":3,"names":["React","useState","formData","useParams","jsxDEV","_jsxDEV","AllQuestions","_s","formId","form","questions","fields","answers","setAnswers","errors","setErrors","validateField","question","value","required","type","emailRegex","test","textRegex","dateRegex","handleChange","fieldId","find","q","error","handleSubmit","event","preventDefault","newErrors","forEach","Object","keys","length","console","log","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","map","label","placeholder","onChange","e","target","options","option","name","id","currentAnswers","checked","filter","item","_c","$RefreshReg$"],"sources":["D:/PROJECTS/PERSONAL PROJECTS/New folder (2)/veuz/src/Components/AllQuestions.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport formData from \"../JSON/formData.json\";\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst AllQuestions = () => {\r\n    const { formId } = useParams();\r\n    const form = formData[formId];\r\n    const questions = form?.fields;\r\n    const [answers, setAnswers] = useState({});\r\n    const [errors, setErrors] = useState({});\r\n\r\n    const validateField = (question, value) => {\r\n        if (question.required && !value) {\r\n            return \"This field is required.\";\r\n        }\r\n        if (question.type === 'email' && value) {\r\n            const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n            if (!emailRegex.test(value)) {\r\n                return \"Please enter a valid email address.\";\r\n            }\r\n        }\r\n        if (question.type === 'textbox' && value) {\r\n            const textRegex = /^[a-zA-Z\\s]*$/;\r\n            if (!textRegex.test(value)) {\r\n                return \"Only alphabets and spaces are allowed.\";\r\n            }\r\n        }\r\n        if (question.type === 'date' && value) {\r\n            const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/; // YYYY-MM-DD format\r\n            if (!dateRegex.test(value)) {\r\n                return \"Please enter a valid date.\";\r\n            }\r\n        }\r\n        if (question.type === 'textarea' && question.required && !value) {\r\n            return \"This field is required.\"; // Add validation for textarea (required check)\r\n        }\r\n        return null;\r\n    };\r\n    \r\n\r\n    const handleChange = (fieldId, value) => {\r\n        setAnswers({\r\n            ...answers,\r\n            [fieldId]: value,\r\n        });\r\n\r\n        // Validate the field on change\r\n        const question = questions.find(q => q.fieldId === fieldId);\r\n        const error = validateField(question, value);\r\n        setErrors({\r\n            ...errors,\r\n            [fieldId]: error,\r\n        });\r\n    };\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        // Validate all fields on submit\r\n        const newErrors = {};\r\n        questions.forEach((question) => {\r\n            const value = answers[question.fieldId];\r\n            const error = validateField(question, value);\r\n            if (error) {\r\n                newErrors[question.fieldId] = error;\r\n            }\r\n        });\r\n\r\n        setErrors(newErrors);\r\n\r\n        if (Object.keys(newErrors).length === 0) {\r\n            console.log(\"Selected Answers:\", answers);\r\n            alert(\"Form submitted successfully!\");\r\n        } else {\r\n            alert(\"Please fix the errors before submitting.\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"container my-4\">\r\n            <h2 className=\"text-center mb-4\">All Questions</h2>\r\n            <form onSubmit={handleSubmit} className=\"row\">\r\n                {questions.map((question) => (\r\n                    <div key={question.fieldId} className=\"col-12 col-md-6 mb-4\">\r\n                        <div className=\"card shadow-sm p-3 h-100\">\r\n                            <label className=\"form-label fw-bold\">{question.label}</label>\r\n                            {question.type === 'textbox' && (\r\n                                <input\r\n                                    type=\"text\"\r\n                                    className={`form-control ${errors[question.fieldId] ? 'is-invalid' : ''}`}\r\n                                    placeholder={question.placeholder}\r\n                                    onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n                                />\r\n                            )}\r\n                            {question.type === 'email' && (\r\n                                <input\r\n                                    type=\"email\"\r\n                                    className={`form-control ${errors[question.fieldId] ? 'is-invalid' : ''}`}\r\n                                    placeholder={question.placeholder}\r\n                                    onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n                                />\r\n                            )}\r\n                            {question.type === 'date' && (\r\n                                <input\r\n                                    type=\"date\"\r\n                                    className={`form-control ${errors[question.fieldId] ? 'is-invalid' : ''}`}\r\n                                    onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n                                />\r\n                            )}\r\n                            {question.type === 'radio' && (\r\n                                <div>\r\n                                    {question.options.map((option) => (\r\n                                        <div key={option.id} className=\"form-check\">\r\n                                            <input\r\n                                                className={`form-check-input ${errors[question.fieldId] ? 'is-invalid' : ''}`}\r\n                                                type=\"radio\"\r\n                                                name={question.fieldId}\r\n                                                value={option.label}\r\n                                                onChange={() => handleChange(question.fieldId, option.label)}\r\n                                            />\r\n                                            <label className=\"form-check-label\">{option.label}</label>\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            )}\r\n                            {question.type === 'checkbox' && (\r\n                                <div>\r\n                                    {question.options.map((option) => (\r\n                                        <div key={option.id} className=\"form-check\">\r\n                                            <input\r\n                                                className={`form-check-input ${errors[question.fieldId] ? 'is-invalid' : ''}`}\r\n                                                type=\"checkbox\"\r\n                                                name={question.fieldId}\r\n                                                value={option.label}\r\n                                                onChange={(e) => {\r\n                                                    const currentAnswers = answers[question.fieldId] || [];\r\n                                                    if (e.target.checked) {\r\n                                                        handleChange(question.fieldId, [...currentAnswers, option.label]);\r\n                                                    } else {\r\n                                                        handleChange(\r\n                                                            question.fieldId,\r\n                                                            currentAnswers.filter((item) => item !== option.label)\r\n                                                        );\r\n                                                    }\r\n                                                }}\r\n                                            />\r\n                                            <label className=\"form-check-label\">{option.label}</label>\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            )}\r\n                            {question.type === 'selectbox' && (\r\n                                <select\r\n                                    className={`form-select ${errors[question.fieldId] ? 'is-invalid' : ''}`}\r\n                                    onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n                                >\r\n                                    <option value=\"\">{question.placeholder}</option>\r\n                                    {question.options.map((option) => (\r\n                                        <option key={option.id} value={option.label}>\r\n                                            {option.label}\r\n                                        </option>\r\n                                    ))}\r\n                                </select>\r\n                            )}\r\n                            {question.type === 'textarea' && (\r\n                                <textarea\r\n                                    className={`form-control ${errors[question.fieldId] ? 'is-invalid' : ''}`}\r\n                                    placeholder={question.placeholder}\r\n                                    onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n                                />\r\n                            )}\r\n                            {errors[question.fieldId] && (\r\n                                <div className=\"text-danger mt-1\">{errors[question.fieldId]}</div>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n                <div className=\"col-12 text-center mt-4\">\r\n                    <button type=\"submit\" className=\"btn btn-primary px-5\">\r\n                        Submit\r\n                    </button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AllQuestions;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}