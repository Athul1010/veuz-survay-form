{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJECTS\\\\PERSONAL PROJECTS\\\\New folder (2)\\\\veuz\\\\src\\\\Components\\\\AllQuestions.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import formData from \"../JSON/formData.json\";\n// import { useParams } from 'react-router-dom';\n\n// const AllQuestions = () => {\n//     const { formId } = useParams();\n//     const form = formData[formId];\n//     const questions = form?.fields;\n//     const [answers, setAnswers] = useState({});\n\n//     const handleChange = (fieldId, value) => {\n//         setAnswers({\n//             ...answers,\n//             [fieldId]: value,\n//         });\n//     };\n\n//     const handleSubmit = (event) => {\n//         event.preventDefault();\n//         console.log('Selected Answers:', answers);\n//     };\n\n//     return (\n//         <div className=\"container my-4\">\n//             <h2 className=\"text-center mb-4\">All Questions</h2>\n//             <form onSubmit={handleSubmit} className=\"row\">\n//                 {questions.map((question, index) => (\n//                     <div key={question.fieldId} className=\"col-12 col-md-6 mb-4\">\n//                         <div className=\"card shadow-sm p-3 h-100\">\n//                             <label className=\"form-label fw-bold\">{question.label}</label>\n//                             {question.type === 'textbox' && (\n//                                 <input\n//                                     type=\"text\"\n//                                     className=\"form-control\"\n//                                     placeholder={question.placeholder}\n//                                     onChange={(e) => handleChange(question.fieldId, e.target.value)}\n//                                     required={question.required}\n//                                 />\n//                             )}\n//                             {question.type === 'email' && (\n//                                 <input\n//                                     type=\"email\"\n//                                     className=\"form-control\"\n//                                     placeholder={question.placeholder}\n//                                     onChange={(e) => handleChange(question.fieldId, e.target.value)}\n//                                     required={question.required}\n//                                 />\n//                             )}\n//                             {question.type === 'date' && (\n//                                 <input\n//                                     type=\"date\"\n//                                     className=\"form-control\"\n//                                     onChange={(e) => handleChange(question.fieldId, e.target.value)}\n//                                     required={question.required}\n//                                 />\n//                             )}\n//                             {question.type === 'radio' && (\n//                                 <div>\n//                                     {question.options.map((option) => (\n//                                         <div key={option.id} className=\"form-check\">\n//                                             <input\n//                                                 className=\"form-check-input\"\n//                                                 type=\"radio\"\n//                                                 name={question.fieldId}\n//                                                 value={option.label}\n//                                                 onChange={() => handleChange(question.fieldId, option.label)}\n//                                                 required={question.required}\n//                                             />\n//                                             <label className=\"form-check-label\">{option.label}</label>\n//                                         </div>\n//                                     ))}\n//                                 </div>\n//                             )}\n//                             {question.type === 'checkbox' && (\n//                                 <div>\n//                                     {question.options.map((option) => (\n//                                         <div key={option.id} className=\"form-check\">\n//                                             <input\n//                                                 className=\"form-check-input\"\n//                                                 type=\"checkbox\"\n//                                                 name={question.fieldId}\n//                                                 value={option.label}\n//                                                 required={question.required}\n//                                                 onChange={(e) => {\n//                                                     const currentAnswers = answers[question.fieldId] || [];\n//                                                     if (e.target.checked) {\n//                                                         handleChange(question.fieldId, [...currentAnswers, option.label]);\n//                                                     } else {\n//                                                         handleChange(\n//                                                             question.fieldId,\n//                                                             currentAnswers.filter((item) => item !== option.label)\n//                                                         );\n//                                                     }\n//                                                 }}\n//                                             />\n//                                             <label className=\"form-check-label\">{option.label}</label>\n//                                         </div>\n//                                     ))}\n//                                 </div>\n//                             )}\n//                             {question.type === 'selectbox' && (\n//                                 <select\n//                                     className=\"form-select\"\n//                                     required={question.required}\n//                                     onChange={(e) => handleChange(question.fieldId, e.target.value)}\n//                                 >\n//                                     <option value=\"\">{question.placeholder}</option>\n//                                     {question.options.map((option) => (\n//                                         <option key={option.id} value={option.label}>\n//                                             {option.label}\n//                                         </option>\n//                                     ))}\n//                                 </select>\n//                             )}\n//                             {question.type === 'textarea' && (\n//                                 <textarea\n//                                     className=\"form-control\"\n//                                     required={question.required}\n//                                     placeholder={question.placeholder}\n//                                     onChange={(e) => handleChange(question.fieldId, e.target.value)}\n//                                 />\n//                             )}\n//                         </div>\n//                     </div>\n//                 ))}\n//                 <div className=\"col-12 text-center mt-4\">\n//                     <button type=\"submit\" className=\"btn btn-primary px-5\">\n//                         Submit\n//                     </button>\n//                 </div>\n//             </form>\n//         </div>\n//     );\n// };\n\n// export default AllQuestions;\n\nimport React, { useState } from 'react';\nimport formData from \"../JSON/formData.json\";\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AllQuestions = () => {\n  _s();\n  const {\n    formId\n  } = useParams();\n  const form = formData[formId];\n  const questions = form === null || form === void 0 ? void 0 : form.fields;\n  const [answers, setAnswers] = useState({});\n  const [validationErrors, setValidationErrors] = useState({});\n  const handleChange = (fieldId, value) => {\n    setAnswers({\n      ...answers,\n      [fieldId]: value\n    });\n    // Clear any existing validation error for the field\n    setValidationErrors({\n      ...validationErrors,\n      [fieldId]: \"\"\n    });\n  };\n\n  // const handleSubmit = (event) => {\n  //     event.preventDefault();\n  //     console.log('Selected Answers:', answers);\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container my-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-center mb-4\",\n      children: \"All Questions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"row\",\n      children: [questions.map((question, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-12 col-md-6 mb-4\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card shadow-sm p-3 h-100\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"form-label fw-bold\",\n            children: question.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 29\n          }, this), question.type === 'textbox' && /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"form-control\",\n            placeholder: question.placeholder,\n            onChange: e => handleChange(question.fieldId, e.target.value),\n            required: question.required\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 33\n          }, this), question.type === 'email' && /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            className: \"form-control\",\n            placeholder: question.placeholder,\n            onChange: e => handleChange(question.fieldId, e.target.value),\n            required: question.required\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 33\n          }, this), question.type === 'date' && /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            className: \"form-control\",\n            onChange: e => handleChange(question.fieldId, e.target.value),\n            required: question.required\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 33\n          }, this), question.type === 'radio' && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: question.options.map(option => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-check\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"form-check-input\",\n                type: \"radio\",\n                name: question.fieldId,\n                value: option.label,\n                onChange: () => handleChange(question.fieldId, option.label),\n                required: question.required\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 208,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"form-check-label\",\n                children: option.label\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 216,\n                columnNumber: 45\n              }, this)]\n            }, option.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 41\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 33\n          }, this), question.type === 'checkbox' && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: question.options.map(option => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-check\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"form-check-input\",\n                type: \"checkbox\",\n                name: question.fieldId,\n                value: option.label,\n                required: question.required,\n                onChange: e => {\n                  const currentAnswers = answers[question.fieldId] || [];\n                  if (e.target.checked) {\n                    handleChange(question.fieldId, [...currentAnswers, option.label]);\n                  } else {\n                    handleChange(question.fieldId, currentAnswers.filter(item => item !== option.label));\n                  }\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 225,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"form-check-label\",\n                children: option.label\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 243,\n                columnNumber: 45\n              }, this)]\n            }, option.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 41\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 33\n          }, this), question.type === 'selectbox' && /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"form-select\",\n            required: question.required,\n            onChange: e => handleChange(question.fieldId, e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: question.placeholder\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 254,\n              columnNumber: 37\n            }, this), question.options.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: option.label,\n              children: option.label\n            }, option.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 41\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 33\n          }, this), question.type === 'textarea' && /*#__PURE__*/_jsxDEV(\"textarea\", {\n            className: \"form-control\",\n            required: question.required,\n            placeholder: question.placeholder,\n            onChange: e => handleChange(question.fieldId, e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 25\n        }, this)\n      }, question.fieldId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-12 text-center mt-4\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn btn-primary px-5\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 9\n  }, this);\n};\n_s(AllQuestions, \"BxSudFwE2ZmU96LOoCKuyi1WRq8=\", false, function () {\n  return [useParams];\n});\n_c = AllQuestions;\nexport default AllQuestions;\nvar _c;\n$RefreshReg$(_c, \"AllQuestions\");","map":{"version":3,"names":["React","useState","formData","useParams","jsxDEV","_jsxDEV","AllQuestions","_s","formId","form","questions","fields","answers","setAnswers","validationErrors","setValidationErrors","handleChange","fieldId","value","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","handleSubmit","map","question","index","label","type","placeholder","onChange","e","target","required","options","option","name","id","currentAnswers","checked","filter","item","_c","$RefreshReg$"],"sources":["D:/PROJECTS/PERSONAL PROJECTS/New folder (2)/veuz/src/Components/AllQuestions.jsx"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import formData from \"../JSON/formData.json\";\r\n// import { useParams } from 'react-router-dom';\r\n\r\n// const AllQuestions = () => {\r\n//     const { formId } = useParams();\r\n//     const form = formData[formId];\r\n//     const questions = form?.fields;\r\n//     const [answers, setAnswers] = useState({});\r\n\r\n\r\n//     const handleChange = (fieldId, value) => {\r\n//         setAnswers({\r\n//             ...answers,\r\n//             [fieldId]: value,\r\n//         });\r\n//     };\r\n\r\n//     const handleSubmit = (event) => {\r\n//         event.preventDefault();\r\n//         console.log('Selected Answers:', answers);\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"container my-4\">\r\n//             <h2 className=\"text-center mb-4\">All Questions</h2>\r\n//             <form onSubmit={handleSubmit} className=\"row\">\r\n//                 {questions.map((question, index) => (\r\n//                     <div key={question.fieldId} className=\"col-12 col-md-6 mb-4\">\r\n//                         <div className=\"card shadow-sm p-3 h-100\">\r\n//                             <label className=\"form-label fw-bold\">{question.label}</label>\r\n//                             {question.type === 'textbox' && (\r\n//                                 <input\r\n//                                     type=\"text\"\r\n//                                     className=\"form-control\"\r\n//                                     placeholder={question.placeholder}\r\n//                                     onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n//                                     required={question.required}\r\n//                                 />\r\n//                             )}\r\n//                             {question.type === 'email' && (\r\n//                                 <input\r\n//                                     type=\"email\"\r\n//                                     className=\"form-control\"\r\n//                                     placeholder={question.placeholder}\r\n//                                     onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n//                                     required={question.required}\r\n//                                 />\r\n//                             )}\r\n//                             {question.type === 'date' && (\r\n//                                 <input\r\n//                                     type=\"date\"\r\n//                                     className=\"form-control\"\r\n//                                     onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n//                                     required={question.required}\r\n//                                 />\r\n//                             )}\r\n//                             {question.type === 'radio' && (\r\n//                                 <div>\r\n//                                     {question.options.map((option) => (\r\n//                                         <div key={option.id} className=\"form-check\">\r\n//                                             <input\r\n//                                                 className=\"form-check-input\"\r\n//                                                 type=\"radio\"\r\n//                                                 name={question.fieldId}\r\n//                                                 value={option.label}\r\n//                                                 onChange={() => handleChange(question.fieldId, option.label)}\r\n//                                                 required={question.required}\r\n//                                             />\r\n//                                             <label className=\"form-check-label\">{option.label}</label>\r\n//                                         </div>\r\n//                                     ))}\r\n//                                 </div>\r\n//                             )}\r\n//                             {question.type === 'checkbox' && (\r\n//                                 <div>\r\n//                                     {question.options.map((option) => (\r\n//                                         <div key={option.id} className=\"form-check\">\r\n//                                             <input\r\n//                                                 className=\"form-check-input\"\r\n//                                                 type=\"checkbox\"\r\n//                                                 name={question.fieldId}\r\n//                                                 value={option.label}\r\n//                                                 required={question.required}\r\n//                                                 onChange={(e) => {\r\n//                                                     const currentAnswers = answers[question.fieldId] || [];\r\n//                                                     if (e.target.checked) {\r\n//                                                         handleChange(question.fieldId, [...currentAnswers, option.label]);\r\n//                                                     } else {\r\n//                                                         handleChange(\r\n//                                                             question.fieldId,\r\n//                                                             currentAnswers.filter((item) => item !== option.label)\r\n//                                                         );\r\n//                                                     }\r\n//                                                 }}\r\n//                                             />\r\n//                                             <label className=\"form-check-label\">{option.label}</label>\r\n//                                         </div>\r\n//                                     ))}\r\n//                                 </div>\r\n//                             )}\r\n//                             {question.type === 'selectbox' && (\r\n//                                 <select\r\n//                                     className=\"form-select\"\r\n//                                     required={question.required}\r\n//                                     onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n//                                 >\r\n//                                     <option value=\"\">{question.placeholder}</option>\r\n//                                     {question.options.map((option) => (\r\n//                                         <option key={option.id} value={option.label}>\r\n//                                             {option.label}\r\n//                                         </option>\r\n//                                     ))}\r\n//                                 </select>\r\n//                             )}\r\n//                             {question.type === 'textarea' && (\r\n//                                 <textarea\r\n//                                     className=\"form-control\"\r\n//                                     required={question.required}\r\n//                                     placeholder={question.placeholder}\r\n//                                     onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n//                                 />\r\n//                             )}\r\n//                         </div>\r\n//                     </div>\r\n//                 ))}\r\n//                 <div className=\"col-12 text-center mt-4\">\r\n//                     <button type=\"submit\" className=\"btn btn-primary px-5\">\r\n//                         Submit\r\n//                     </button>\r\n//                 </div>\r\n//             </form>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default AllQuestions;\r\n\r\n\r\n\r\nimport React, { useState } from 'react';\r\nimport formData from \"../JSON/formData.json\";\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst AllQuestions = () => {\r\n    const { formId } = useParams();\r\n    const form = formData[formId];\r\n    const questions = form?.fields;\r\n    const [answers, setAnswers] = useState({});\r\n\r\n    const [validationErrors, setValidationErrors] = useState({});\r\n\r\n    const handleChange = (fieldId, value) => {\r\n        setAnswers({\r\n            ...answers,\r\n            [fieldId]: value,\r\n        });\r\n        // Clear any existing validation error for the field\r\n        setValidationErrors({\r\n            ...validationErrors,\r\n            [fieldId]: \"\",\r\n        });\r\n    };\r\n\r\n    // const handleSubmit = (event) => {\r\n    //     event.preventDefault();\r\n    //     console.log('Selected Answers:', answers);\r\n    // };\r\n\r\n    return (\r\n        <div className=\"container my-4\">\r\n            <h2 className=\"text-center mb-4\">All Questions</h2>\r\n            <form onSubmit={handleSubmit} className=\"row\">\r\n                {questions.map((question, index) => (\r\n                    <div key={question.fieldId} className=\"col-12 col-md-6 mb-4\">\r\n                        <div className=\"card shadow-sm p-3 h-100\">\r\n                            <label className=\"form-label fw-bold\">{question.label}</label>\r\n                            {question.type === 'textbox' && (\r\n                                <input\r\n                                    type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    placeholder={question.placeholder}\r\n                                    onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n                                    required={question.required}\r\n                                />\r\n                            )}\r\n                            {question.type === 'email' && (\r\n                                <input\r\n                                    type=\"email\"\r\n                                    className=\"form-control\"\r\n                                    placeholder={question.placeholder}\r\n                                    onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n                                    required={question.required}\r\n                                />\r\n                            )}\r\n                            {question.type === 'date' && (\r\n                                <input\r\n                                    type=\"date\"\r\n                                    className=\"form-control\"\r\n                                    onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n                                    required={question.required}\r\n                                />\r\n                            )}\r\n                            {question.type === 'radio' && (\r\n                                <div>\r\n                                    {question.options.map((option) => (\r\n                                        <div key={option.id} className=\"form-check\">\r\n                                            <input\r\n                                                className=\"form-check-input\"\r\n                                                type=\"radio\"\r\n                                                name={question.fieldId}\r\n                                                value={option.label}\r\n                                                onChange={() => handleChange(question.fieldId, option.label)}\r\n                                                required={question.required}\r\n                                            />\r\n                                            <label className=\"form-check-label\">{option.label}</label>\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            )}\r\n                            {question.type === 'checkbox' && (\r\n                                <div>\r\n                                    {question.options.map((option) => (\r\n                                        <div key={option.id} className=\"form-check\">\r\n                                            <input\r\n                                                className=\"form-check-input\"\r\n                                                type=\"checkbox\"\r\n                                                name={question.fieldId}\r\n                                                value={option.label}\r\n                                                required={question.required}\r\n                                                onChange={(e) => {\r\n                                                    const currentAnswers = answers[question.fieldId] || [];\r\n                                                    if (e.target.checked) {\r\n                                                        handleChange(question.fieldId, [...currentAnswers, option.label]);\r\n                                                    } else {\r\n                                                        handleChange(\r\n                                                            question.fieldId,\r\n                                                            currentAnswers.filter((item) => item !== option.label)\r\n                                                        );\r\n                                                    }\r\n                                                }}\r\n                                            />\r\n                                            <label className=\"form-check-label\">{option.label}</label>\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            )}\r\n                            {question.type === 'selectbox' && (\r\n                                <select\r\n                                    className=\"form-select\"\r\n                                    required={question.required}\r\n                                    onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n                                >\r\n                                    <option value=\"\">{question.placeholder}</option>\r\n                                    {question.options.map((option) => (\r\n                                        <option key={option.id} value={option.label}>\r\n                                            {option.label}\r\n                                        </option>\r\n                                    ))}\r\n                                </select>\r\n                            )}\r\n                            {question.type === 'textarea' && (\r\n                                <textarea\r\n                                    className=\"form-control\"\r\n                                    required={question.required}\r\n                                    placeholder={question.placeholder}\r\n                                    onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n                                />\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n                <div className=\"col-12 text-center mt-4\">\r\n                    <button type=\"submit\" className=\"btn btn-primary px-5\">\r\n                        Submit\r\n                    </button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AllQuestions;\r\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,SAASC,SAAS,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM;IAAEC;EAAO,CAAC,GAAGL,SAAS,CAAC,CAAC;EAC9B,MAAMM,IAAI,GAAGP,QAAQ,CAACM,MAAM,CAAC;EAC7B,MAAME,SAAS,GAAGD,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEE,MAAM;EAC9B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC,CAAC;EAE1C,MAAM,CAACa,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC,CAAC;EAE5D,MAAMe,YAAY,GAAGA,CAACC,OAAO,EAAEC,KAAK,KAAK;IACrCL,UAAU,CAAC;MACP,GAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}