{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJECTS\\\\PERSONAL PROJECTS\\\\New folder (2)\\\\veuz\\\\src\\\\Components\\\\AllQuestions.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import formData from \"../JSON/formData.json\";\n// import { useParams } from 'react-router-dom';\n\n// const AllQuestions = () => {\n//     const { formId } = useParams();\n//     const form = formData[formId];\n//     const questions = form?.fields;\n//     const [answers, setAnswers] = useState({});\n\n//     const handleChange = (fieldId, value) => {\n//         setAnswers({\n//             ...answers,\n//             [fieldId]: value,\n//         });\n//     };\n\n//     const handleSubmit = (event) => {\n//         event.preventDefault();\n//         console.log('Selected Answers:', answers);\n//     };\n\n//     return (\n//         <div className=\"container my-4\">\n//             <h2 className=\"text-center mb-4\">All Questions</h2>\n//             <form onSubmit={handleSubmit} className=\"row\">\n//                 {questions.map((question, index) => (\n//                     <div key={question.fieldId} className=\"col-12 col-md-6 mb-4\">\n//                         <div className=\"card shadow-sm p-3 h-100\">\n//                             <label className=\"form-label fw-bold\">{question.label}</label>\n//                             {question.type === 'textbox' && (\n//                                 <input\n//                                     type=\"text\"\n//                                     className=\"form-control\"\n//                                     placeholder={question.placeholder}\n//                                     onChange={(e) => handleChange(question.fieldId, e.target.value)}\n//                                     required={question.required}\n//                                 />\n//                             )}\n//                             {question.type === 'email' && (\n//                                 <input\n//                                     type=\"email\"\n//                                     className=\"form-control\"\n//                                     placeholder={question.placeholder}\n//                                     onChange={(e) => handleChange(question.fieldId, e.target.value)}\n//                                     required={question.required}\n//                                 />\n//                             )}\n//                             {question.type === 'date' && (\n//                                 <input\n//                                     type=\"date\"\n//                                     className=\"form-control\"\n//                                     onChange={(e) => handleChange(question.fieldId, e.target.value)}\n//                                     required={question.required}\n//                                 />\n//                             )}\n//                             {question.type === 'radio' && (\n//                                 <div>\n//                                     {question.options.map((option) => (\n//                                         <div key={option.id} className=\"form-check\">\n//                                             <input\n//                                                 className=\"form-check-input\"\n//                                                 type=\"radio\"\n//                                                 name={question.fieldId}\n//                                                 value={option.label}\n//                                                 onChange={() => handleChange(question.fieldId, option.label)}\n//                                                 required={question.required}\n//                                             />\n//                                             <label className=\"form-check-label\">{option.label}</label>\n//                                         </div>\n//                                     ))}\n//                                 </div>\n//                             )}\n//                             {question.type === 'checkbox' && (\n//                                 <div>\n//                                     {question.options.map((option) => (\n//                                         <div key={option.id} className=\"form-check\">\n//                                             <input\n//                                                 className=\"form-check-input\"\n//                                                 type=\"checkbox\"\n//                                                 name={question.fieldId}\n//                                                 value={option.label}\n//                                                 required={question.required}\n//                                                 onChange={(e) => {\n//                                                     const currentAnswers = answers[question.fieldId] || [];\n//                                                     if (e.target.checked) {\n//                                                         handleChange(question.fieldId, [...currentAnswers, option.label]);\n//                                                     } else {\n//                                                         handleChange(\n//                                                             question.fieldId,\n//                                                             currentAnswers.filter((item) => item !== option.label)\n//                                                         );\n//                                                     }\n//                                                 }}\n//                                             />\n//                                             <label className=\"form-check-label\">{option.label}</label>\n//                                         </div>\n//                                     ))}\n//                                 </div>\n//                             )}\n//                             {question.type === 'selectbox' && (\n//                                 <select\n//                                     className=\"form-select\"\n//                                     required={question.required}\n//                                     onChange={(e) => handleChange(question.fieldId, e.target.value)}\n//                                 >\n//                                     <option value=\"\">{question.placeholder}</option>\n//                                     {question.options.map((option) => (\n//                                         <option key={option.id} value={option.label}>\n//                                             {option.label}\n//                                         </option>\n//                                     ))}\n//                                 </select>\n//                             )}\n//                             {question.type === 'textarea' && (\n//                                 <textarea\n//                                     className=\"form-control\"\n//                                     required={question.required}\n//                                     placeholder={question.placeholder}\n//                                     onChange={(e) => handleChange(question.fieldId, e.target.value)}\n//                                 />\n//                             )}\n//                         </div>\n//                     </div>\n//                 ))}\n//                 <div className=\"col-12 text-center mt-4\">\n//                     <button type=\"submit\" className=\"btn btn-primary px-5\">\n//                         Submit\n//                     </button>\n//                 </div>\n//             </form>\n//         </div>\n//     );\n// };\n\n// export default AllQuestions;\n\nimport React, { useState } from 'react';\nimport formData from \"../JSON/formData.json\";\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AllQuestions = () => {\n  _s();\n  const {\n    formId\n  } = useParams();\n  const form = formData[formId];\n  const questions = form === null || form === void 0 ? void 0 : form.fields;\n  const [answers, setAnswers] = useState({});\n  const [validationErrors, setValidationErrors] = useState({});\n  const handleChange = (fieldId, value) => {\n    setAnswers({\n      ...answers,\n      [fieldId]: value\n    });\n\n    // Clear validation error when the user changes the input\n    setValidationErrors(prevErrors => ({\n      ...prevErrors,\n      [fieldId]: ''\n    }));\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    let errors = {};\n\n    // Validate textarea fields\n    questions.forEach(question => {\n      if (question.type === 'textarea' && question.required && !answers[question.fieldId]) {\n        errors[question.fieldId] = 'This field is required';\n      }\n    });\n    if (Object.keys(errors).length > 0) {\n      setValidationErrors(errors); // Show validation errors\n      return; // Prevent form submission if errors exist\n    }\n    console.log('Selected Answers:', answers);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container my-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-center mb-4\",\n      children: \"All Questions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"row\",\n      children: [questions.map(question => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-12 col-md-6 mb-4\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card shadow-sm p-3 h-100\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"form-label fw-bold\",\n            children: question.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 29\n          }, this), question.type === 'textbox' && /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"form-control\",\n            placeholder: question.placeholder,\n            onChange: e => handleChange(question.fieldId, e.target.value),\n            required: question.required\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 33\n          }, this), question.type === 'email' && /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            className: \"form-control\",\n            placeholder: question.placeholder,\n            onChange: e => handleChange(question.fieldId, e.target.value),\n            required: question.required\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 33\n          }, this), question.type === 'date' && /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            className: \"form-control\",\n            onChange: e => handleChange(question.fieldId, e.target.value),\n            required: question.required\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 33\n          }, this), question.type === 'radio' && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: question.options.map(option => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-check\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"form-check-input\",\n                type: \"radio\",\n                name: question.fieldId,\n                value: option.label,\n                onChange: () => handleChange(question.fieldId, option.label),\n                required: question.required\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 227,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"form-check-label\",\n                children: option.label\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 235,\n                columnNumber: 45\n              }, this)]\n            }, option.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 41\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 33\n          }, this), question.type === 'checkbox' && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: question.options.map(option => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-check\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"form-check-input\",\n                type: \"checkbox\",\n                name: question.fieldId,\n                value: option.label,\n                required: question.required,\n                onChange: e => {\n                  const currentAnswers = answers[question.fieldId] || [];\n                  if (e.target.checked) {\n                    handleChange(question.fieldId, [...currentAnswers, option.label]);\n                  } else {\n                    handleChange(question.fieldId, currentAnswers.filter(item => item !== option.label));\n                  }\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 245,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"form-check-label\",\n                children: option.label\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 263,\n                columnNumber: 45\n              }, this)]\n            }, option.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 41\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 33\n          }, this), question.type === 'selectbox' && /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"form-select\",\n            required: question.required,\n            onChange: e => handleChange(question.fieldId, e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: question.placeholder\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 37\n            }, this), question.options.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: option.label,\n              children: option.label\n            }, option.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 41\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 33\n          }, this), question.type === 'textarea' && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n              className: \"form-control\",\n              required: question.required,\n              placeholder: question.placeholder,\n              onChange: e => handleChange(question.fieldId, e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 286,\n              columnNumber: 37\n            }, this), validationErrors[question.fieldId] && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-danger mt-2\",\n              children: validationErrors[question.fieldId]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 25\n        }, this)\n      }, question.fieldId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-12 text-center mt-4\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn btn-primary px-5\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 186,\n    columnNumber: 9\n  }, this);\n};\n_s(AllQuestions, \"BxSudFwE2ZmU96LOoCKuyi1WRq8=\", false, function () {\n  return [useParams];\n});\n_c = AllQuestions;\nexport default AllQuestions;\nvar _c;\n$RefreshReg$(_c, \"AllQuestions\");","map":{"version":3,"names":["React","useState","formData","useParams","jsxDEV","_jsxDEV","AllQuestions","_s","formId","form","questions","fields","answers","setAnswers","validationErrors","setValidationErrors","handleChange","fieldId","value","prevErrors","handleSubmit","event","preventDefault","errors","forEach","question","type","required","Object","keys","length","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","map","label","placeholder","onChange","e","target","options","option","name","id","currentAnswers","checked","filter","item","_c","$RefreshReg$"],"sources":["D:/PROJECTS/PERSONAL PROJECTS/New folder (2)/veuz/src/Components/AllQuestions.jsx"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import formData from \"../JSON/formData.json\";\r\n// import { useParams } from 'react-router-dom';\r\n\r\n// const AllQuestions = () => {\r\n//     const { formId } = useParams();\r\n//     const form = formData[formId];\r\n//     const questions = form?.fields;\r\n//     const [answers, setAnswers] = useState({});\r\n\r\n\r\n//     const handleChange = (fieldId, value) => {\r\n//         setAnswers({\r\n//             ...answers,\r\n//             [fieldId]: value,\r\n//         });\r\n//     };\r\n\r\n//     const handleSubmit = (event) => {\r\n//         event.preventDefault();\r\n//         console.log('Selected Answers:', answers);\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"container my-4\">\r\n//             <h2 className=\"text-center mb-4\">All Questions</h2>\r\n//             <form onSubmit={handleSubmit} className=\"row\">\r\n//                 {questions.map((question, index) => (\r\n//                     <div key={question.fieldId} className=\"col-12 col-md-6 mb-4\">\r\n//                         <div className=\"card shadow-sm p-3 h-100\">\r\n//                             <label className=\"form-label fw-bold\">{question.label}</label>\r\n//                             {question.type === 'textbox' && (\r\n//                                 <input\r\n//                                     type=\"text\"\r\n//                                     className=\"form-control\"\r\n//                                     placeholder={question.placeholder}\r\n//                                     onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n//                                     required={question.required}\r\n//                                 />\r\n//                             )}\r\n//                             {question.type === 'email' && (\r\n//                                 <input\r\n//                                     type=\"email\"\r\n//                                     className=\"form-control\"\r\n//                                     placeholder={question.placeholder}\r\n//                                     onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n//                                     required={question.required}\r\n//                                 />\r\n//                             )}\r\n//                             {question.type === 'date' && (\r\n//                                 <input\r\n//                                     type=\"date\"\r\n//                                     className=\"form-control\"\r\n//                                     onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n//                                     required={question.required}\r\n//                                 />\r\n//                             )}\r\n//                             {question.type === 'radio' && (\r\n//                                 <div>\r\n//                                     {question.options.map((option) => (\r\n//                                         <div key={option.id} className=\"form-check\">\r\n//                                             <input\r\n//                                                 className=\"form-check-input\"\r\n//                                                 type=\"radio\"\r\n//                                                 name={question.fieldId}\r\n//                                                 value={option.label}\r\n//                                                 onChange={() => handleChange(question.fieldId, option.label)}\r\n//                                                 required={question.required}\r\n//                                             />\r\n//                                             <label className=\"form-check-label\">{option.label}</label>\r\n//                                         </div>\r\n//                                     ))}\r\n//                                 </div>\r\n//                             )}\r\n//                             {question.type === 'checkbox' && (\r\n//                                 <div>\r\n//                                     {question.options.map((option) => (\r\n//                                         <div key={option.id} className=\"form-check\">\r\n//                                             <input\r\n//                                                 className=\"form-check-input\"\r\n//                                                 type=\"checkbox\"\r\n//                                                 name={question.fieldId}\r\n//                                                 value={option.label}\r\n//                                                 required={question.required}\r\n//                                                 onChange={(e) => {\r\n//                                                     const currentAnswers = answers[question.fieldId] || [];\r\n//                                                     if (e.target.checked) {\r\n//                                                         handleChange(question.fieldId, [...currentAnswers, option.label]);\r\n//                                                     } else {\r\n//                                                         handleChange(\r\n//                                                             question.fieldId,\r\n//                                                             currentAnswers.filter((item) => item !== option.label)\r\n//                                                         );\r\n//                                                     }\r\n//                                                 }}\r\n//                                             />\r\n//                                             <label className=\"form-check-label\">{option.label}</label>\r\n//                                         </div>\r\n//                                     ))}\r\n//                                 </div>\r\n//                             )}\r\n//                             {question.type === 'selectbox' && (\r\n//                                 <select\r\n//                                     className=\"form-select\"\r\n//                                     required={question.required}\r\n//                                     onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n//                                 >\r\n//                                     <option value=\"\">{question.placeholder}</option>\r\n//                                     {question.options.map((option) => (\r\n//                                         <option key={option.id} value={option.label}>\r\n//                                             {option.label}\r\n//                                         </option>\r\n//                                     ))}\r\n//                                 </select>\r\n//                             )}\r\n//                             {question.type === 'textarea' && (\r\n//                                 <textarea\r\n//                                     className=\"form-control\"\r\n//                                     required={question.required}\r\n//                                     placeholder={question.placeholder}\r\n//                                     onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n//                                 />\r\n//                             )}\r\n//                         </div>\r\n//                     </div>\r\n//                 ))}\r\n//                 <div className=\"col-12 text-center mt-4\">\r\n//                     <button type=\"submit\" className=\"btn btn-primary px-5\">\r\n//                         Submit\r\n//                     </button>\r\n//                 </div>\r\n//             </form>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default AllQuestions;\r\n\r\n\r\n\r\n\r\nimport React, { useState } from 'react';\r\nimport formData from \"../JSON/formData.json\";\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst AllQuestions = () => {\r\n    const { formId } = useParams();\r\n    const form = formData[formId];\r\n    const questions = form?.fields;\r\n    const [answers, setAnswers] = useState({});\r\n    const [validationErrors, setValidationErrors] = useState({});\r\n\r\n    const handleChange = (fieldId, value) => {\r\n        setAnswers({\r\n            ...answers,\r\n            [fieldId]: value,\r\n        });\r\n\r\n        // Clear validation error when the user changes the input\r\n        setValidationErrors((prevErrors) => ({\r\n            ...prevErrors,\r\n            [fieldId]: ''\r\n        }));\r\n    };\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        let errors = {};\r\n\r\n        // Validate textarea fields\r\n        questions.forEach((question) => {\r\n            if (question.type === 'textarea' && question.required && !answers[question.fieldId]) {\r\n                errors[question.fieldId] = 'This field is required';\r\n            }\r\n        });\r\n\r\n        if (Object.keys(errors).length > 0) {\r\n            setValidationErrors(errors); // Show validation errors\r\n            return; // Prevent form submission if errors exist\r\n        }\r\n\r\n        console.log('Selected Answers:', answers);\r\n    };\r\n\r\n    return (\r\n        <div className=\"container my-4\">\r\n            <h2 className=\"text-center mb-4\">All Questions</h2>\r\n            <form onSubmit={handleSubmit} className=\"row\">\r\n                {questions.map((question) => (\r\n                    <div key={question.fieldId} className=\"col-12 col-md-6 mb-4\">\r\n                        <div className=\"card shadow-sm p-3 h-100\">\r\n                            <label className=\"form-label fw-bold\">{question.label}</label>\r\n\r\n                            {question.type === 'textbox' && (\r\n                                <input\r\n                                    type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    placeholder={question.placeholder}\r\n                                    onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n                                    required={question.required}\r\n                                />\r\n                            )}\r\n\r\n                            {question.type === 'email' && (\r\n                                <input\r\n                                    type=\"email\"\r\n                                    className=\"form-control\"\r\n                                    placeholder={question.placeholder}\r\n                                    onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n                                    required={question.required}\r\n                                />\r\n                            )}\r\n\r\n                            {question.type === 'date' && (\r\n                                <input\r\n                                    type=\"date\"\r\n                                    className=\"form-control\"\r\n                                    onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n                                    required={question.required}\r\n                                />\r\n                            )}\r\n\r\n                            {question.type === 'radio' && (\r\n                                <div>\r\n                                    {question.options.map((option) => (\r\n                                        <div key={option.id} className=\"form-check\">\r\n                                            <input\r\n                                                className=\"form-check-input\"\r\n                                                type=\"radio\"\r\n                                                name={question.fieldId}\r\n                                                value={option.label}\r\n                                                onChange={() => handleChange(question.fieldId, option.label)}\r\n                                                required={question.required}\r\n                                            />\r\n                                            <label className=\"form-check-label\">{option.label}</label>\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            )}\r\n\r\n                            {question.type === 'checkbox' && (\r\n                                <div>\r\n                                    {question.options.map((option) => (\r\n                                        <div key={option.id} className=\"form-check\">\r\n                                            <input\r\n                                                className=\"form-check-input\"\r\n                                                type=\"checkbox\"\r\n                                                name={question.fieldId}\r\n                                                value={option.label}\r\n                                                required={question.required}\r\n                                                onChange={(e) => {\r\n                                                    const currentAnswers = answers[question.fieldId] || [];\r\n                                                    if (e.target.checked) {\r\n                                                        handleChange(question.fieldId, [...currentAnswers, option.label]);\r\n                                                    } else {\r\n                                                        handleChange(\r\n                                                            question.fieldId,\r\n                                                            currentAnswers.filter((item) => item !== option.label)\r\n                                                        );\r\n                                                    }\r\n                                                }}\r\n                                            />\r\n                                            <label className=\"form-check-label\">{option.label}</label>\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            )}\r\n\r\n                            {question.type === 'selectbox' && (\r\n                                <select\r\n                                    className=\"form-select\"\r\n                                    required={question.required}\r\n                                    onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n                                >\r\n                                    <option value=\"\">{question.placeholder}</option>\r\n                                    {question.options.map((option) => (\r\n                                        <option key={option.id} value={option.label}>\r\n                                            {option.label}\r\n                                        </option>\r\n                                    ))}\r\n                                </select>\r\n                            )}\r\n\r\n                            {question.type === 'textarea' && (\r\n                                <div>\r\n                                    <textarea\r\n                                        className=\"form-control\"\r\n                                        required={question.required}\r\n                                        placeholder={question.placeholder}\r\n                                        onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n                                    />\r\n                                    {validationErrors[question.fieldId] && (\r\n                                        <div className=\"text-danger mt-2\">\r\n                                            {validationErrors[question.fieldId]}\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n                <div className=\"col-12 text-center mt-4\">\r\n                    <button type=\"submit\" className=\"btn btn-primary px-5\">\r\n                        Submit\r\n                    </button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AllQuestions;\r\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,SAASC,SAAS,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM;IAAEC;EAAO,CAAC,GAAGL,SAAS,CAAC,CAAC;EAC9B,MAAMM,IAAI,GAAGP,QAAQ,CAACM,MAAM,CAAC;EAC7B,MAAME,SAAS,GAAGD,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEE,MAAM;EAC9B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC1C,MAAM,CAACa,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC,CAAC;EAE5D,MAAMe,YAAY,GAAGA,CAACC,OAAO,EAAEC,KAAK,KAAK;IACrCL,UAAU,CAAC;MACP,GAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}