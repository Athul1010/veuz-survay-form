{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJECTS\\\\PERSONAL PROJECTS\\\\New folder (2)\\\\veuz\\\\src\\\\Components\\\\AllQuestions.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport formData from \"../JSON/formData.json\";\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AllQuestions = () => {\n  _s();\n  const {\n    formId\n  } = useParams();\n  const form = formData[formId];\n  const questions = form === null || form === void 0 ? void 0 : form.fields;\n  const [answers, setAnswers] = useState({});\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [errors, setErrors] = useState({});\n  const validateInput = () => {\n    const currentQuestion = questions[currentQuestionIndex];\n    const value = answers[currentQuestion.fieldId] || '';\n    const newErrors = {};\n\n    // Validate based on the question type\n    if (!value) {\n      newErrors[currentQuestion.fieldId] = 'This field is required.';\n    } else if (currentQuestion.type === 'textbox' && !/^[A-Za-z\\s]+$/.test(value)) {\n      newErrors[currentQuestion.fieldId] = 'Only letters and spaces are allowed.';\n    } else if (currentQuestion.type === 'email' && !/^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/.test(value)) {\n      newErrors[currentQuestion.fieldId] = 'Please enter a valid email address.';\n    }\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n  const handleChange = (fieldId, value) => {\n    setAnswers({\n      ...answers,\n      [fieldId]: value\n    });\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    console.log('Selected Answers:', answers);\n  };\n  const currentQuestion = questions[currentQuestionIndex];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container my-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-center mb-4\",\n      children: \"All Questions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"row\",\n      children: [questions.map((question, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-12 col-md-6 mb-4\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card shadow-sm p-3 h-100\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"form-label fw-bold\",\n            children: question.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 29\n          }, this), question.type === 'textbox' && /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"form-control\",\n            placeholder: question.placeholder,\n            onChange: e => handleChange(question.fieldId, e.target.value),\n            required: question.required\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 33\n          }, this), question.type === 'email' && /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            className: \"form-control\",\n            placeholder: question.placeholder,\n            onChange: e => handleChange(question.fieldId, e.target.value),\n            required: question.required\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 33\n          }, this), question.type === 'date' && /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            className: \"form-control\",\n            onChange: e => handleChange(question.fieldId, e.target.value),\n            required: question.required\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 33\n          }, this), question.type === 'radio' && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: question.options.map(option => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-check\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"form-check-input\",\n                type: \"radio\",\n                name: question.fieldId,\n                value: option.label,\n                onChange: () => handleChange(question.fieldId, option.label),\n                required: question.required\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"form-check-label\",\n                children: option.label\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 45\n              }, this)]\n            }, option.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 41\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 33\n          }, this), question.type === 'checkbox' && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: question.options.map(option => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-check\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"form-check-input\",\n                type: \"checkbox\",\n                name: question.fieldId,\n                value: option.label,\n                required: question.required,\n                onChange: e => {\n                  const currentAnswers = answers[question.fieldId] || [];\n                  if (e.target.checked) {\n                    handleChange(question.fieldId, [...currentAnswers, option.label]);\n                  } else {\n                    handleChange(question.fieldId, currentAnswers.filter(item => item !== option.label));\n                  }\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 101,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"form-check-label\",\n                children: option.label\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 45\n              }, this)]\n            }, option.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 41\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 33\n          }, this), question.type === 'selectbox' && /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"form-select\",\n            required: question.required,\n            onChange: e => handleChange(question.fieldId, e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: question.placeholder\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 37\n            }, this), question.options.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: option.label,\n              children: option.label\n            }, option.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 41\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 33\n          }, this), question.type === 'textarea' && /*#__PURE__*/_jsxDEV(\"textarea\", {\n            className: \"form-control\",\n            required: question.required,\n            placeholder: question.placeholder,\n            onChange: e => handleChange(question.fieldId, e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 25\n        }, this)\n      }, question.fieldId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-12 text-center mt-4\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn btn-primary px-5\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n_s(AllQuestions, \"Qkop7gSAljt09SsfXkVryqMGRjo=\", false, function () {\n  return [useParams];\n});\n_c = AllQuestions;\nexport default AllQuestions;\nvar _c;\n$RefreshReg$(_c, \"AllQuestions\");","map":{"version":3,"names":["React","useState","formData","useParams","jsxDEV","_jsxDEV","AllQuestions","_s","formId","form","questions","fields","answers","setAnswers","currentQuestionIndex","setCurrentQuestionIndex","errors","setErrors","validateInput","currentQuestion","value","fieldId","newErrors","type","test","Object","keys","length","handleChange","handleSubmit","event","preventDefault","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","map","question","index","label","placeholder","onChange","e","target","required","options","option","name","id","currentAnswers","checked","filter","item","_c","$RefreshReg$"],"sources":["D:/PROJECTS/PERSONAL PROJECTS/New folder (2)/veuz/src/Components/AllQuestions.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport formData from \"../JSON/formData.json\";\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst AllQuestions = () => {\r\n    const { formId } = useParams();\r\n    const form = formData[formId];\r\n    const questions = form?.fields;\r\n    const [answers, setAnswers] = useState({});\r\n\r\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n    const [errors, setErrors] = useState({});\r\n    \r\n    const validateInput = () => {\r\n        const currentQuestion = questions[currentQuestionIndex];\r\n        const value = answers[currentQuestion.fieldId] || '';\r\n        const newErrors = {};\r\n    \r\n        // Validate based on the question type\r\n        if (!value) {\r\n          newErrors[currentQuestion.fieldId] = 'This field is required.';\r\n        } else if (currentQuestion.type === 'textbox' && !/^[A-Za-z\\s]+$/.test(value)) {\r\n          newErrors[currentQuestion.fieldId] = 'Only letters and spaces are allowed.';\r\n        } else if (currentQuestion.type === 'email' && !/^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/.test(value)) {\r\n          newErrors[currentQuestion.fieldId] = 'Please enter a valid email address.';\r\n        } \r\n    \r\n        setErrors(newErrors);\r\n        return Object.keys(newErrors).length === 0;\r\n      };\r\n\r\n    const handleChange = (fieldId, value) => {\r\n        setAnswers({\r\n            ...answers,\r\n            [fieldId]: value,\r\n        });\r\n    };\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        console.log('Selected Answers:', answers);\r\n    };\r\n\r\n    const currentQuestion = questions[currentQuestionIndex];\r\n    \r\n    return (\r\n        <div className=\"container my-4\">\r\n            <h2 className=\"text-center mb-4\">All Questions</h2>\r\n            <form onSubmit={handleSubmit} className=\"row\">\r\n                {questions.map((question, index) => (\r\n                    <div key={question.fieldId} className=\"col-12 col-md-6 mb-4\">\r\n                        <div className=\"card shadow-sm p-3 h-100\">\r\n                            <label className=\"form-label fw-bold\">{question.label}</label>\r\n                            {question.type === 'textbox' && (\r\n                                <input\r\n                                    type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    placeholder={question.placeholder}\r\n                                    onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n                                    required={question.required}\r\n                                />\r\n                            )}\r\n                            {question.type === 'email' && (\r\n                                <input\r\n                                    type=\"email\"\r\n                                    className=\"form-control\"\r\n                                    placeholder={question.placeholder}\r\n                                    onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n                                    required={question.required}\r\n                                />\r\n                            )}\r\n                            {question.type === 'date' && (\r\n                                <input\r\n                                    type=\"date\"\r\n                                    className=\"form-control\"\r\n                                    onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n                                    required={question.required}\r\n                                />\r\n                            )}\r\n                            {question.type === 'radio' && (\r\n                                <div>\r\n                                    {question.options.map((option) => (\r\n                                        <div key={option.id} className=\"form-check\">\r\n                                            <input\r\n                                                className=\"form-check-input\"\r\n                                                type=\"radio\"\r\n                                                name={question.fieldId}\r\n                                                value={option.label}\r\n                                                onChange={() => handleChange(question.fieldId, option.label)}\r\n                                                required={question.required}\r\n                                            />\r\n                                            <label className=\"form-check-label\">{option.label}</label>\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            )}\r\n                            {question.type === 'checkbox' && (\r\n                                <div>\r\n                                    {question.options.map((option) => (\r\n                                        <div key={option.id} className=\"form-check\">\r\n                                            <input\r\n                                                className=\"form-check-input\"\r\n                                                type=\"checkbox\"\r\n                                                name={question.fieldId}\r\n                                                value={option.label}\r\n                                                required={question.required}\r\n                                                onChange={(e) => {\r\n                                                    const currentAnswers = answers[question.fieldId] || [];\r\n                                                    if (e.target.checked) {\r\n                                                        handleChange(question.fieldId, [...currentAnswers, option.label]);\r\n                                                    } else {\r\n                                                        handleChange(\r\n                                                            question.fieldId,\r\n                                                            currentAnswers.filter((item) => item !== option.label)\r\n                                                        );\r\n                                                    }\r\n                                                }}\r\n                                            />\r\n                                            <label className=\"form-check-label\">{option.label}</label>\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            )}\r\n                            {question.type === 'selectbox' && (\r\n                                <select\r\n                                    className=\"form-select\"\r\n                                    required={question.required}\r\n                                    onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n                                >\r\n                                    <option value=\"\">{question.placeholder}</option>\r\n                                    {question.options.map((option) => (\r\n                                        <option key={option.id} value={option.label}>\r\n                                            {option.label}\r\n                                        </option>\r\n                                    ))}\r\n                                </select>\r\n                            )}\r\n                            {question.type === 'textarea' && (\r\n                                <textarea\r\n                                    className=\"form-control\"\r\n                                    required={question.required}\r\n                                    placeholder={question.placeholder}\r\n                                    onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n                                />\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n                <div className=\"col-12 text-center mt-4\">\r\n                    <button type=\"submit\" className=\"btn btn-primary px-5\">\r\n                        Submit\r\n                    </button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AllQuestions;\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}