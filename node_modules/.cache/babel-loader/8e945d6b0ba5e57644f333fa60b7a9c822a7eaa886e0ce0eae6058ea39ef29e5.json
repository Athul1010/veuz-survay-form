{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJECTS\\\\PERSONAL PROJECTS\\\\New folder (2)\\\\veuz\\\\src\\\\Components\\\\OnePagePerSection.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import { useParams } from 'react-router-dom';\n// import formData from \"../JSON/formData.json\";\n\n// const OnePagePerSection = () => {\n//     const { formId } = useParams();\n//     const form = formData[formId];\n//     const questions = form?.fields;\n//     const sections = [...new Set(questions.map(q => q.sectionId))];\n//     const [answers, setAnswers] = useState({});\n\n//     const handleChange = (fieldId, value) => {\n//         setAnswers({\n//             ...answers,\n//             [fieldId]: value,\n//         });\n//     };\n\n//     const handleSubmit = () => {\n//         console.log('Selected Answers:', answers);\n//     };\n\n//     return (\n//         <div className=\"container\">\n//             {sections.map(sectionId => (\n//                 <div key={sectionId} className=\"mb-4\">\n//                     <h2 className='text-center'>Section {sectionId}</h2>\n//                     <div className=\"p-3 mt-3\">\n//                         <div className=\"row justify-content-center\">\n//                             {questions.filter(q => q.sectionId === sectionId).map((question) => (\n//                                 <div key={question.fieldId} className=\"col-xl-4 col-lg-4 col-md-6 col-sm-12 mb-3\">\n//                                     <div className=\"card p-3 border\">\n//                                         <label>{question.label}</label>\n//                                         {question.type === 'textbox' && (\n//                                             <input\n//                                                 type=\"text\"\n//                                                 className=\"form-control\"\n//                                                 placeholder={question.placeholder}\n//                                                 onChange={(e) => handleChange(question.fieldId, e.target.value)}\n//                                             />\n//                                         )}\n//                                         {question.type === 'email' && (\n//                                             <input\n//                                                 type=\"email\"\n//                                                 className=\"form-control\"\n//                                                 placeholder={question.placeholder}\n//                                                 onChange={(e) => handleChange(question.fieldId, e.target.value)}\n//                                             />\n//                                         )}\n//                                         {question.type === 'date' && (\n//                                             <input\n//                                                 type=\"date\"\n//                                                 className=\"form-control\"\n//                                                 onChange={(e) => handleChange(question.fieldId, e.target.value)}\n//                                             />\n//                                         )}\n//                                         {question.type === 'radio' && question.options.map(option => (\n//                                             <div key={option.id}>\n//                                                 <input\n//                                                     type=\"radio\"\n//                                                     name={question.fieldId}\n//                                                     value={option.label}\n//                                                     onChange={() => handleChange(question.fieldId, option.label)}\n//                                                 />\n//                                                 <label>{option.label}</label>\n//                                             </div>\n//                                         ))}\n//                                         {question.type === 'checkbox' && question.options.map(option => (\n//                                             <div key={option.id}>\n//                                                 <input\n//                                                     type=\"checkbox\"\n//                                                     name={question.fieldId}\n//                                                     value={option.label}\n//                                                     onChange={(e) => {\n//                                                         const currentAnswers = answers[question.fieldId] || [];\n//                                                         if (e.target.checked) {\n//                                                             handleChange(question.fieldId, [...currentAnswers, option.label]);\n//                                                         } else {\n//                                                             handleChange(question.fieldId, currentAnswers.filter(item => item !== option.label));\n//                                                         }\n//                                                     }}\n//                                                 />\n//                                                 <label>{option.label}</label>\n//                                             </div>\n//                                         ))}\n//                                         {question.type === 'selectbox' && (\n//                                             <select\n//                                                 className=\"form-control\"\n//                                                 onChange={(e) => handleChange(question.fieldId, e.target.value)}\n//                                             >\n//                                                 <option value=\"\">{question.placeholder}</option>\n//                                                 {question.options.map(option => (\n//                                                     <option key={option.id} value={option.label}>{option.label}</option>\n//                                                 ))}\n//                                             </select>\n//                                         )}\n//                                         {question.type === 'textarea' && (\n//                                             <textarea\n//                                                 className=\"form-control\"\n//                                                 placeholder={question.placeholder}\n//                                                 onChange={(e) => handleChange(question.fieldId, e.target.value)}\n//                                             />\n//                                         )}\n//                                     </div>\n//                                 </div>\n//                             ))}\n//                         </div>\n//                     </div>\n//                 </div>\n//             ))}\n//             <div className=\"text-center mt-4\">\n//                 <button className=\"btn btn-primary\" onClick={handleSubmit}>Submit</button>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default OnePagePerSection;\n\nimport React, { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport formData from \"../JSON/formData.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OnePagePerSection = () => {\n  _s();\n  const {\n    formId\n  } = useParams();\n  const form = formData[formId];\n  const questions = form === null || form === void 0 ? void 0 : form.fields;\n  const sections = [...new Set(questions.map(q => q.sectionId))];\n  const [answers, setAnswers] = useState({});\n  const [errors, setErrors] = useState({}); // State to track errors\n\n  const handleChange = (fieldId, value) => {\n    setAnswers({\n      ...answers,\n      [fieldId]: value\n    });\n    setErrors({\n      ...errors,\n      [fieldId]: ''\n    }); // Clear error when user starts typing\n  };\n  const handleSubmit = () => {\n    let isValid = true;\n    let errorMessages = {};\n\n    // Check for required fields\n    questions.forEach(question => {\n      if (question.required && !answers[question.fieldId]) {\n        isValid = false;\n        errorMessages[question.fieldId] = 'This field is required'; // Set error message for required field\n      }\n    });\n\n    // Set errors if any\n    setErrors(errorMessages);\n    if (isValid) {\n      console.log('Selected Answers:', answers);\n    } else {\n      console.log('Form has errors:', errorMessages);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [sections.map(sectionId => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-center\",\n        children: [\"Section \", sectionId]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-3 mt-3\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row justify-content-center\",\n          children: questions.filter(q => q.sectionId === sectionId).map(question => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-xl-4 col-lg-4 col-md-6 col-sm-12 mb-3\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card p-3 border\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: question.label\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 174,\n                columnNumber: 41\n              }, this), question.type === 'textbox' && /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  className: \"form-control\",\n                  placeholder: question.placeholder,\n                  onChange: e => handleChange(question.fieldId, e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 177,\n                  columnNumber: 49\n                }, this), errors[question.fieldId] && /*#__PURE__*/_jsxDEV(\"small\", {\n                  className: \"text-danger\",\n                  children: errors[question.fieldId]\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 184,\n                  columnNumber: 53\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 176,\n                columnNumber: 45\n              }, this), question.type === 'email' && /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"email\",\n                className: \"form-control\",\n                placeholder: question.placeholder,\n                onChange: e => handleChange(question.fieldId, e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 189,\n                columnNumber: 45\n              }, this), question.type === 'date' && /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"date\",\n                className: \"form-control\",\n                onChange: e => handleChange(question.fieldId, e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 197,\n                columnNumber: 45\n              }, this), question.type === 'radio' && question.options.map(option => /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"radio\",\n                  name: question.fieldId,\n                  value: option.label,\n                  onChange: () => handleChange(question.fieldId, option.label)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 205,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: option.label\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 211,\n                  columnNumber: 49\n                }, this)]\n              }, option.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 204,\n                columnNumber: 45\n              }, this)), question.type === 'checkbox' && question.options.map(option => /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  name: question.fieldId,\n                  value: option.label,\n                  onChange: e => {\n                    const currentAnswers = answers[question.fieldId] || [];\n                    if (e.target.checked) {\n                      handleChange(question.fieldId, [...currentAnswers, option.label]);\n                    } else {\n                      handleChange(question.fieldId, currentAnswers.filter(item => item !== option.label));\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 216,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: option.label\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 229,\n                  columnNumber: 49\n                }, this)]\n              }, option.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 215,\n                columnNumber: 45\n              }, this)), question.type === 'selectbox' && /*#__PURE__*/_jsxDEV(\"select\", {\n                className: \"form-control\",\n                onChange: e => handleChange(question.fieldId, e.target.value),\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: question.placeholder\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 237,\n                  columnNumber: 49\n                }, this), question.options.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: option.label,\n                  children: option.label\n                }, option.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 239,\n                  columnNumber: 53\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 233,\n                columnNumber: 45\n              }, this), question.type === 'textarea' && /*#__PURE__*/_jsxDEV(\"textarea\", {\n                className: \"form-control\",\n                placeholder: question.placeholder,\n                onChange: e => handleChange(question.fieldId, e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 244,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 37\n            }, this)\n          }, question.fieldId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 21\n      }, this)]\n    }, sectionId, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center mt-4\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: handleSubmit,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 9\n  }, this);\n};\n_s(OnePagePerSection, \"pN7/nkcMAp9oqmMH9JxVVfaRX44=\", false, function () {\n  return [useParams];\n});\n_c = OnePagePerSection;\nexport default OnePagePerSection;\nvar _c;\n$RefreshReg$(_c, \"OnePagePerSection\");","map":{"version":3,"names":["React","useState","useParams","formData","jsxDEV","_jsxDEV","OnePagePerSection","_s","formId","form","questions","fields","sections","Set","map","q","sectionId","answers","setAnswers","errors","setErrors","handleChange","fieldId","value","handleSubmit","isValid","errorMessages","forEach","question","required","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","filter","label","type","placeholder","onChange","e","target","options","option","name","id","currentAnswers","checked","item","onClick","_c","$RefreshReg$"],"sources":["D:/PROJECTS/PERSONAL PROJECTS/New folder (2)/veuz/src/Components/OnePagePerSection.jsx"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import { useParams } from 'react-router-dom';\r\n// import formData from \"../JSON/formData.json\";\r\n\r\n// const OnePagePerSection = () => {\r\n//     const { formId } = useParams();\r\n//     const form = formData[formId];\r\n//     const questions = form?.fields;\r\n//     const sections = [...new Set(questions.map(q => q.sectionId))];\r\n//     const [answers, setAnswers] = useState({});\r\n\r\n//     const handleChange = (fieldId, value) => {\r\n//         setAnswers({\r\n//             ...answers,\r\n//             [fieldId]: value,\r\n//         });\r\n//     };\r\n\r\n//     const handleSubmit = () => {\r\n//         console.log('Selected Answers:', answers);\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"container\">\r\n//             {sections.map(sectionId => (\r\n//                 <div key={sectionId} className=\"mb-4\">\r\n//                     <h2 className='text-center'>Section {sectionId}</h2>\r\n//                     <div className=\"p-3 mt-3\">\r\n//                         <div className=\"row justify-content-center\">\r\n//                             {questions.filter(q => q.sectionId === sectionId).map((question) => (\r\n//                                 <div key={question.fieldId} className=\"col-xl-4 col-lg-4 col-md-6 col-sm-12 mb-3\">\r\n//                                     <div className=\"card p-3 border\">\r\n//                                         <label>{question.label}</label>\r\n//                                         {question.type === 'textbox' && (\r\n//                                             <input\r\n//                                                 type=\"text\"\r\n//                                                 className=\"form-control\"\r\n//                                                 placeholder={question.placeholder}\r\n//                                                 onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n//                                             />\r\n//                                         )}\r\n//                                         {question.type === 'email' && (\r\n//                                             <input\r\n//                                                 type=\"email\"\r\n//                                                 className=\"form-control\"\r\n//                                                 placeholder={question.placeholder}\r\n//                                                 onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n//                                             />\r\n//                                         )}\r\n//                                         {question.type === 'date' && (\r\n//                                             <input\r\n//                                                 type=\"date\"\r\n//                                                 className=\"form-control\"\r\n//                                                 onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n//                                             />\r\n//                                         )}\r\n//                                         {question.type === 'radio' && question.options.map(option => (\r\n//                                             <div key={option.id}>\r\n//                                                 <input\r\n//                                                     type=\"radio\"\r\n//                                                     name={question.fieldId}\r\n//                                                     value={option.label}\r\n//                                                     onChange={() => handleChange(question.fieldId, option.label)}\r\n//                                                 />\r\n//                                                 <label>{option.label}</label>\r\n//                                             </div>\r\n//                                         ))}\r\n//                                         {question.type === 'checkbox' && question.options.map(option => (\r\n//                                             <div key={option.id}>\r\n//                                                 <input\r\n//                                                     type=\"checkbox\"\r\n//                                                     name={question.fieldId}\r\n//                                                     value={option.label}\r\n//                                                     onChange={(e) => {\r\n//                                                         const currentAnswers = answers[question.fieldId] || [];\r\n//                                                         if (e.target.checked) {\r\n//                                                             handleChange(question.fieldId, [...currentAnswers, option.label]);\r\n//                                                         } else {\r\n//                                                             handleChange(question.fieldId, currentAnswers.filter(item => item !== option.label));\r\n//                                                         }\r\n//                                                     }}\r\n//                                                 />\r\n//                                                 <label>{option.label}</label>\r\n//                                             </div>\r\n//                                         ))}\r\n//                                         {question.type === 'selectbox' && (\r\n//                                             <select\r\n//                                                 className=\"form-control\"\r\n//                                                 onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n//                                             >\r\n//                                                 <option value=\"\">{question.placeholder}</option>\r\n//                                                 {question.options.map(option => (\r\n//                                                     <option key={option.id} value={option.label}>{option.label}</option>\r\n//                                                 ))}\r\n//                                             </select>\r\n//                                         )}\r\n//                                         {question.type === 'textarea' && (\r\n//                                             <textarea\r\n//                                                 className=\"form-control\"\r\n//                                                 placeholder={question.placeholder}\r\n//                                                 onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n//                                             />\r\n//                                         )}\r\n//                                     </div>\r\n//                                 </div>\r\n//                             ))}\r\n//                         </div>\r\n//                     </div>\r\n//                 </div>\r\n//             ))}\r\n//             <div className=\"text-center mt-4\">\r\n//                 <button className=\"btn btn-primary\" onClick={handleSubmit}>Submit</button>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default OnePagePerSection;\r\n\r\n\r\n\r\nimport React, { useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport formData from \"../JSON/formData.json\";\r\n\r\nconst OnePagePerSection = () => {\r\n    const { formId } = useParams();\r\n    const form = formData[formId];\r\n    const questions = form?.fields;\r\n    const sections = [...new Set(questions.map(q => q.sectionId))];\r\n    const [answers, setAnswers] = useState({});\r\n    const [errors, setErrors] = useState({}); // State to track errors\r\n\r\n    const handleChange = (fieldId, value) => {\r\n        setAnswers({\r\n            ...answers,\r\n            [fieldId]: value,\r\n        });\r\n        setErrors({ ...errors, [fieldId]: '' }); // Clear error when user starts typing\r\n    };\r\n\r\n    const handleSubmit = () => {\r\n        let isValid = true;\r\n        let errorMessages = {};\r\n\r\n        // Check for required fields\r\n        questions.forEach(question => {\r\n            if (question.required && !answers[question.fieldId]) {\r\n                isValid = false;\r\n                errorMessages[question.fieldId] = 'This field is required'; // Set error message for required field\r\n            }\r\n        });\r\n\r\n        // Set errors if any\r\n        setErrors(errorMessages);\r\n\r\n        if (isValid) {\r\n            console.log('Selected Answers:', answers);\r\n        } else {\r\n            console.log('Form has errors:', errorMessages);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            {sections.map(sectionId => (\r\n                <div key={sectionId} className=\"mb-4\">\r\n                    <h2 className='text-center'>Section {sectionId}</h2>\r\n                    <div className=\"p-3 mt-3\">\r\n                        <div className=\"row justify-content-center\">\r\n                            {questions.filter(q => q.sectionId === sectionId).map((question) => (\r\n                                <div key={question.fieldId} className=\"col-xl-4 col-lg-4 col-md-6 col-sm-12 mb-3\">\r\n                                    <div className=\"card p-3 border\">\r\n                                        <label>{question.label}</label>\r\n                                        {question.type === 'textbox' && (\r\n                                            <div>\r\n                                                <input\r\n                                                    type=\"text\"\r\n                                                    className=\"form-control\"\r\n                                                    placeholder={question.placeholder}\r\n                                                    onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n                                                />\r\n                                                {errors[question.fieldId] && (\r\n                                                    <small className=\"text-danger\">{errors[question.fieldId]}</small>\r\n                                                )}\r\n                                            </div>\r\n                                        )}\r\n                                        {question.type === 'email' && (\r\n                                            <input\r\n                                                type=\"email\"\r\n                                                className=\"form-control\"\r\n                                                placeholder={question.placeholder}\r\n                                                onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n                                            />\r\n                                        )}\r\n                                        {question.type === 'date' && (\r\n                                            <input\r\n                                                type=\"date\"\r\n                                                className=\"form-control\"\r\n                                                onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n                                            />\r\n                                        )}\r\n                                        {question.type === 'radio' && question.options.map(option => (\r\n                                            <div key={option.id}>\r\n                                                <input\r\n                                                    type=\"radio\"\r\n                                                    name={question.fieldId}\r\n                                                    value={option.label}\r\n                                                    onChange={() => handleChange(question.fieldId, option.label)}\r\n                                                />\r\n                                                <label>{option.label}</label>\r\n                                            </div>\r\n                                        ))}\r\n                                        {question.type === 'checkbox' && question.options.map(option => (\r\n                                            <div key={option.id}>\r\n                                                <input\r\n                                                    type=\"checkbox\"\r\n                                                    name={question.fieldId}\r\n                                                    value={option.label}\r\n                                                    onChange={(e) => {\r\n                                                        const currentAnswers = answers[question.fieldId] || [];\r\n                                                        if (e.target.checked) {\r\n                                                            handleChange(question.fieldId, [...currentAnswers, option.label]);\r\n                                                        } else {\r\n                                                            handleChange(question.fieldId, currentAnswers.filter(item => item !== option.label));\r\n                                                        }\r\n                                                    }}\r\n                                                />\r\n                                                <label>{option.label}</label>\r\n                                            </div>\r\n                                        ))}\r\n                                        {question.type === 'selectbox' && (\r\n                                            <select\r\n                                                className=\"form-control\"\r\n                                                onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n                                            >\r\n                                                <option value=\"\">{question.placeholder}</option>\r\n                                                {question.options.map(option => (\r\n                                                    <option key={option.id} value={option.label}>{option.label}</option>\r\n                                                ))}\r\n                                            </select>\r\n                                        )}\r\n                                        {question.type === 'textarea' && (\r\n                                            <textarea\r\n                                                className=\"form-control\"\r\n                                                placeholder={question.placeholder}\r\n                                                onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n                                            />\r\n                                        )}\r\n                                    </div>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            ))}\r\n            <div className=\"text-center mt-4\">\r\n                <button className=\"btn btn-primary\" onClick={handleSubmit}>Submit</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default OnePagePerSection;\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}