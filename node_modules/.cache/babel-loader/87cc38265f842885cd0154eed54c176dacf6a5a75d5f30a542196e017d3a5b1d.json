{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJECTS\\\\PERSONAL PROJECTS\\\\New folder (2)\\\\veuz\\\\src\\\\Components\\\\OnePagePerQuestion.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import 'bootstrap/dist/css/bootstrap.min.css';\n// import formData from \"../JSON/formData.json\";\n// import { useParams } from \"react-router-dom\";\n\n// const OnePagePerQuestion = () => {\n//   const { formId } = useParams();\n//   const form = formData[formId];\n//   const questions = form?.fields;\n//   const [answers, setAnswers] = useState({});\n\n//   const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n//   const [errors, setErrors] = useState({});\n\n//   const handleChange = (fieldId, value) => {\n//     setAnswers({\n//       ...answers,\n//       [fieldId]: value,\n//     });\n//   };\n\n//   const validateInput = () => {\n//     const currentQuestion = questions[currentQuestionIndex];\n//     const value = answers[currentQuestion.fieldId] || '';\n//     const newErrors = {};\n\n//     // Validate based on the question type\n//     if (!value) {\n//       newErrors[currentQuestion.fieldId] = 'This field is required.';\n//     } else if (currentQuestion.type === 'textbox' && !/^[A-Za-z\\s]+$/.test(value)) {\n//       newErrors[currentQuestion.fieldId] = 'Only letters and spaces are allowed.';\n//     } else if (currentQuestion.type === 'email' && !/^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/.test(value)) {\n//       newErrors[currentQuestion.fieldId] = 'Please enter a valid email address.';\n//     } \n\n//     setErrors(newErrors);\n//     return Object.keys(newErrors).length === 0;\n//   };\n\n//   const handleNext = () => {\n//     if (validateInput()) {\n//       setCurrentQuestionIndex((prevIndex) => Math.min(prevIndex + 1, questions.length - 1));\n//     }\n//   };\n\n//   const handlePrevious = () => {\n//     setCurrentQuestionIndex((prevIndex) => Math.max(prevIndex - 1, 0));\n//   };\n\n//   const handleSubmit = () => {\n//     if (validateInput()) {\n//       console.log('Selected Answers:', answers);\n//     }\n//   };\n\n//   const currentQuestion = questions[currentQuestionIndex];\n\n//   return (\n//     <div className=\"container mt-5\">\n//       <div className=\"row justify-content-center\">\n//         <div className=\"col-xl-6 col-lg-8 col-md-10 col-sm-12\">\n//           <div className=\"card shadow-sm\">\n//             <div className=\"card-body\">\n//               <h2 className=\"text-center mb-4\">{currentQuestion.label}</h2>\n//               {currentQuestion.type === 'textbox' && (\n//                 <input\n//                   type=\"text\"\n//                   className=\"form-control mb-3\"\n//                   placeholder={currentQuestion.placeholder}\n//                   onChange={(e) => handleChange(currentQuestion.fieldId, e.target.value)}\n//                   required\n//                 />\n//               )}\n//               {currentQuestion.type === 'email' && (\n//                 <input\n//                   type=\"email\"\n//                   className=\"form-control mb-3\"\n//                   placeholder={currentQuestion.placeholder}\n//                   onChange={(e) => handleChange(currentQuestion.fieldId, e.target.value)}\n//                   required\n//                 />\n//               )}\n//               {currentQuestion.type === 'date' && (\n//                 <input\n//                   type=\"date\"\n//                   className=\"form-control mb-3\"\n//                   onChange={(e) => handleChange(currentQuestion.fieldId, e.target.value)}\n//                   required\n//                 />\n//               )}\n//               {currentQuestion.type === 'radio' &&\n//                 currentQuestion.options.map((option) => (\n//                   <div className=\"form-check mb-2\" key={option.id}>\n//                     <input\n//                       className=\"form-check-input\"\n//                       type=\"radio\"\n//                       name={currentQuestion.fieldId}\n//                       value={option.label}\n//                       onChange={() => handleChange(currentQuestion.fieldId, option.label)}\n//                       required\n//                     />\n//                     <label className=\"form-check-label\">{option.label}</label>\n//                   </div>\n//                 ))}\n//               {currentQuestion.type === 'checkbox' &&\n//                 currentQuestion.options.map((option) => (\n//                   <div className=\"form-check mb-2\" key={option.id}>\n//                     <input\n//                       className=\"form-check-input\"\n//                       type=\"checkbox\"\n//                       name={currentQuestion.fieldId}\n//                       value={option.label}\n//                       onChange={(e) => {\n//                         const currentAnswers = answers[currentQuestion.fieldId] || [];\n//                         if (e.target.checked) {\n//                           handleChange(currentQuestion.fieldId, [...currentAnswers, option.label]);\n//                         } else {\n//                           handleChange(\n//                             currentQuestion.fieldId,\n//                             currentAnswers.filter((item) => item !== option.label)\n//                           );\n//                         }\n//                       }}\n//                       required\n//                     />\n//                     <label className=\"form-check-label\">{option.label}</label>\n//                   </div>\n//                 ))}\n//               {currentQuestion.type === 'selectbox' && (\n//                 <select\n//                   className=\"form-select mb-3\"\n//                   onChange={(e) => handleChange(currentQuestion.fieldId, e.target.value)}\n//                   required={currentQuestion.required}\n//                 >\n//                   <option value=\"\">{currentQuestion.placeholder}</option>\n//                   {currentQuestion.options.map((option) => (\n//                     <option key={option.id} value={option.label}>\n//                       {option.label}\n//                     </option>\n//                   ))}\n//                 </select>\n//               )}\n//               {currentQuestion.type === 'textarea' && (\n//                 <textarea\n//                   className=\"form-control mb-3\"\n//                   placeholder={currentQuestion.placeholder}\n//                   onChange={(e) => handleChange(currentQuestion.fieldId, e.target.value)}\n//                   required={currentQuestion.required}\n//                 />\n//               )}\n//               {errors[currentQuestion.fieldId] && (\n//                 <div className=\"text-danger mt-2\">{errors[currentQuestion.fieldId]}</div>\n//               )}\n//               <div className=\"d-flex justify-content-between\">\n//                 <button\n//                   className=\"btn btn-secondary\"\n//                   onClick={handlePrevious}\n//                   disabled={currentQuestionIndex === 0}\n//                 >\n//                   Previous\n//                 </button>\n//                 {currentQuestionIndex === questions.length - 1 ? (\n//                   <button className=\"btn btn-primary\" onClick={handleSubmit}>\n//                     Submit\n//                   </button>\n//                 ) : (\n//                   <button\n//                     className=\"btn btn-primary\"\n//                     onClick={handleNext}\n//                     disabled={currentQuestionIndex === questions.length - 1}\n//                   >\n//                     Next\n//                   </button>\n//                 )}\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default OnePagePerQuestion;\n\nimport React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport formData from \"../JSON/formData.json\";\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OnePagePerQuestion = () => {\n  _s();\n  const {\n    formId\n  } = useParams();\n  const form = formData[formId];\n  const questions = form === null || form === void 0 ? void 0 : form.fields;\n  const [answers, setAnswers] = useState({});\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const handleChange = (fieldId, value) => {\n    setAnswers({\n      ...answers,\n      [fieldId]: value\n    });\n  };\n  const handleNext = () => {\n    setCurrentQuestionIndex(prevIndex => Math.min(prevIndex + 1, questions.length - 1));\n  };\n  const handlePrevious = () => {\n    setCurrentQuestionIndex(prevIndex => Math.max(prevIndex - 1, 0));\n  };\n  const handleSubmit = () => {\n    console.log('Selected Answers:', answers);\n  };\n  const currentQuestion = questions[currentQuestionIndex];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-5\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row justify-content-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-xl-6 col-lg-8 col-md-10 col-sm-12\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card shadow-sm\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-body\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"text-center mb-4\",\n              children: currentQuestion.label\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 15\n            }, this), currentQuestion.type === 'textbox' && /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: \"form-control mb-3\",\n              placeholder: currentQuestion.placeholder,\n              onChange: e => handleChange(currentQuestion.fieldId, e.target.value),\n              required: currentQuestion.required\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 17\n            }, this), currentQuestion.type === 'email' && /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"email\",\n              className: \"form-control mb-3\",\n              placeholder: currentQuestion.placeholder,\n              onChange: e => handleChange(currentQuestion.fieldId, e.target.value),\n              required: currentQuestion.required\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 17\n            }, this), currentQuestion.type === 'date' && /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"date\",\n              className: \"form-control mb-3\",\n              onChange: e => handleChange(currentQuestion.fieldId, e.target.value),\n              required: currentQuestion.required\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 17\n            }, this), currentQuestion.type === 'radio' && currentQuestion.options.map(option => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-check mb-2\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"form-check-input\",\n                type: \"radio\",\n                name: currentQuestion.fieldId,\n                value: option.label,\n                onChange: () => handleChange(currentQuestion.fieldId, option.label),\n                required: currentQuestion.required\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 257,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"form-check-label\",\n                children: option.label\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 265,\n                columnNumber: 21\n              }, this)]\n            }, option.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 19\n            }, this)), currentQuestion.type === 'checkbox' && currentQuestion.options.map(option => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-check mb-2\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"form-check-input\",\n                type: \"checkbox\",\n                name: currentQuestion.fieldId,\n                value: option.label,\n                onChange: e => {\n                  const currentAnswers = answers[currentQuestion.fieldId] || [];\n                  if (e.target.checked) {\n                    handleChange(currentQuestion.fieldId, [...currentAnswers, option.label]);\n                  } else {\n                    handleChange(currentQuestion.fieldId, currentAnswers.filter(item => item !== option.label));\n                  }\n                },\n                required: currentQuestion.required\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 271,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"form-check-label\",\n                children: option.label\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 289,\n                columnNumber: 21\n              }, this)]\n            }, option.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 19\n            }, this)), currentQuestion.type === 'selectbox' && /*#__PURE__*/_jsxDEV(\"select\", {\n              className: \"form-select mb-3\",\n              onChange: e => handleChange(currentQuestion.fieldId, e.target.value),\n              required: currentQuestion.required,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: currentQuestion.placeholder\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 298,\n                columnNumber: 19\n              }, this), currentQuestion.options.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: option.label,\n                children: option.label\n              }, option.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 300,\n                columnNumber: 21\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 17\n            }, this), currentQuestion.type === 'textarea' && /*#__PURE__*/_jsxDEV(\"textarea\", {\n              className: \"form-control mb-3\",\n              placeholder: currentQuestion.placeholder,\n              onChange: e => handleChange(currentQuestion.fieldId, e.target.value),\n              required: currentQuestion.required\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 307,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"d-flex justify-content-between\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-secondary\",\n                onClick: handlePrevious,\n                disabled: currentQuestionIndex === 0,\n                children: \"Previous\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 315,\n                columnNumber: 17\n              }, this), currentQuestionIndex === questions.length - 1 ? /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-primary\",\n                onClick: handleSubmit,\n                children: \"Submit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 323,\n                columnNumber: 19\n              }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-primary\",\n                onClick: handleNext,\n                disabled: currentQuestionIndex === questions.length - 1,\n                children: \"Next\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 327,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 314,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 222,\n    columnNumber: 5\n  }, this);\n};\n_s(OnePagePerQuestion, \"cf0QtmQLSRyioRzG0FOQMgVFSM4=\", false, function () {\n  return [useParams];\n});\n_c = OnePagePerQuestion;\nexport default OnePagePerQuestion;\nvar _c;\n$RefreshReg$(_c, \"OnePagePerQuestion\");","map":{"version":3,"names":["React","useState","formData","useParams","jsxDEV","_jsxDEV","OnePagePerQuestion","_s","formId","form","questions","fields","answers","setAnswers","currentQuestionIndex","setCurrentQuestionIndex","handleChange","fieldId","value","handleNext","prevIndex","Math","min","length","handlePrevious","max","handleSubmit","console","log","currentQuestion","className","children","label","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","e","target","required","options","map","option","name","id","currentAnswers","checked","filter","item","onClick","disabled","_c","$RefreshReg$"],"sources":["D:/PROJECTS/PERSONAL PROJECTS/New folder (2)/veuz/src/Components/OnePagePerQuestion.jsx"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import 'bootstrap/dist/css/bootstrap.min.css';\r\n// import formData from \"../JSON/formData.json\";\r\n// import { useParams } from \"react-router-dom\";\r\n\r\n\r\n// const OnePagePerQuestion = () => {\r\n//   const { formId } = useParams();\r\n//   const form = formData[formId];\r\n//   const questions = form?.fields;\r\n//   const [answers, setAnswers] = useState({});\r\n  \r\n//   const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n//   const [errors, setErrors] = useState({});\r\n\r\n//   const handleChange = (fieldId, value) => {\r\n//     setAnswers({\r\n//       ...answers,\r\n//       [fieldId]: value,\r\n//     });\r\n//   };\r\n\r\n//   const validateInput = () => {\r\n//     const currentQuestion = questions[currentQuestionIndex];\r\n//     const value = answers[currentQuestion.fieldId] || '';\r\n//     const newErrors = {};\r\n\r\n//     // Validate based on the question type\r\n//     if (!value) {\r\n//       newErrors[currentQuestion.fieldId] = 'This field is required.';\r\n//     } else if (currentQuestion.type === 'textbox' && !/^[A-Za-z\\s]+$/.test(value)) {\r\n//       newErrors[currentQuestion.fieldId] = 'Only letters and spaces are allowed.';\r\n//     } else if (currentQuestion.type === 'email' && !/^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/.test(value)) {\r\n//       newErrors[currentQuestion.fieldId] = 'Please enter a valid email address.';\r\n//     } \r\n\r\n//     setErrors(newErrors);\r\n//     return Object.keys(newErrors).length === 0;\r\n//   };\r\n\r\n//   const handleNext = () => {\r\n//     if (validateInput()) {\r\n//       setCurrentQuestionIndex((prevIndex) => Math.min(prevIndex + 1, questions.length - 1));\r\n//     }\r\n//   };\r\n\r\n//   const handlePrevious = () => {\r\n//     setCurrentQuestionIndex((prevIndex) => Math.max(prevIndex - 1, 0));\r\n//   };\r\n\r\n//   const handleSubmit = () => {\r\n//     if (validateInput()) {\r\n//       console.log('Selected Answers:', answers);\r\n//     }\r\n//   };\r\n\r\n//   const currentQuestion = questions[currentQuestionIndex];\r\n\r\n//   return (\r\n//     <div className=\"container mt-5\">\r\n//       <div className=\"row justify-content-center\">\r\n//         <div className=\"col-xl-6 col-lg-8 col-md-10 col-sm-12\">\r\n//           <div className=\"card shadow-sm\">\r\n//             <div className=\"card-body\">\r\n//               <h2 className=\"text-center mb-4\">{currentQuestion.label}</h2>\r\n//               {currentQuestion.type === 'textbox' && (\r\n//                 <input\r\n//                   type=\"text\"\r\n//                   className=\"form-control mb-3\"\r\n//                   placeholder={currentQuestion.placeholder}\r\n//                   onChange={(e) => handleChange(currentQuestion.fieldId, e.target.value)}\r\n//                   required\r\n//                 />\r\n//               )}\r\n//               {currentQuestion.type === 'email' && (\r\n//                 <input\r\n//                   type=\"email\"\r\n//                   className=\"form-control mb-3\"\r\n//                   placeholder={currentQuestion.placeholder}\r\n//                   onChange={(e) => handleChange(currentQuestion.fieldId, e.target.value)}\r\n//                   required\r\n//                 />\r\n//               )}\r\n//               {currentQuestion.type === 'date' && (\r\n//                 <input\r\n//                   type=\"date\"\r\n//                   className=\"form-control mb-3\"\r\n//                   onChange={(e) => handleChange(currentQuestion.fieldId, e.target.value)}\r\n//                   required\r\n//                 />\r\n//               )}\r\n//               {currentQuestion.type === 'radio' &&\r\n//                 currentQuestion.options.map((option) => (\r\n//                   <div className=\"form-check mb-2\" key={option.id}>\r\n//                     <input\r\n//                       className=\"form-check-input\"\r\n//                       type=\"radio\"\r\n//                       name={currentQuestion.fieldId}\r\n//                       value={option.label}\r\n//                       onChange={() => handleChange(currentQuestion.fieldId, option.label)}\r\n//                       required\r\n//                     />\r\n//                     <label className=\"form-check-label\">{option.label}</label>\r\n//                   </div>\r\n//                 ))}\r\n//               {currentQuestion.type === 'checkbox' &&\r\n//                 currentQuestion.options.map((option) => (\r\n//                   <div className=\"form-check mb-2\" key={option.id}>\r\n//                     <input\r\n//                       className=\"form-check-input\"\r\n//                       type=\"checkbox\"\r\n//                       name={currentQuestion.fieldId}\r\n//                       value={option.label}\r\n//                       onChange={(e) => {\r\n//                         const currentAnswers = answers[currentQuestion.fieldId] || [];\r\n//                         if (e.target.checked) {\r\n//                           handleChange(currentQuestion.fieldId, [...currentAnswers, option.label]);\r\n//                         } else {\r\n//                           handleChange(\r\n//                             currentQuestion.fieldId,\r\n//                             currentAnswers.filter((item) => item !== option.label)\r\n//                           );\r\n//                         }\r\n//                       }}\r\n//                       required\r\n//                     />\r\n//                     <label className=\"form-check-label\">{option.label}</label>\r\n//                   </div>\r\n//                 ))}\r\n//               {currentQuestion.type === 'selectbox' && (\r\n//                 <select\r\n//                   className=\"form-select mb-3\"\r\n//                   onChange={(e) => handleChange(currentQuestion.fieldId, e.target.value)}\r\n//                   required={currentQuestion.required}\r\n//                 >\r\n//                   <option value=\"\">{currentQuestion.placeholder}</option>\r\n//                   {currentQuestion.options.map((option) => (\r\n//                     <option key={option.id} value={option.label}>\r\n//                       {option.label}\r\n//                     </option>\r\n//                   ))}\r\n//                 </select>\r\n//               )}\r\n//               {currentQuestion.type === 'textarea' && (\r\n//                 <textarea\r\n//                   className=\"form-control mb-3\"\r\n//                   placeholder={currentQuestion.placeholder}\r\n//                   onChange={(e) => handleChange(currentQuestion.fieldId, e.target.value)}\r\n//                   required={currentQuestion.required}\r\n//                 />\r\n//               )}\r\n//               {errors[currentQuestion.fieldId] && (\r\n//                 <div className=\"text-danger mt-2\">{errors[currentQuestion.fieldId]}</div>\r\n//               )}\r\n//               <div className=\"d-flex justify-content-between\">\r\n//                 <button\r\n//                   className=\"btn btn-secondary\"\r\n//                   onClick={handlePrevious}\r\n//                   disabled={currentQuestionIndex === 0}\r\n//                 >\r\n//                   Previous\r\n//                 </button>\r\n//                 {currentQuestionIndex === questions.length - 1 ? (\r\n//                   <button className=\"btn btn-primary\" onClick={handleSubmit}>\r\n//                     Submit\r\n//                   </button>\r\n//                 ) : (\r\n//                   <button\r\n//                     className=\"btn btn-primary\"\r\n//                     onClick={handleNext}\r\n//                     disabled={currentQuestionIndex === questions.length - 1}\r\n//                   >\r\n//                     Next\r\n//                   </button>\r\n//                 )}\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default OnePagePerQuestion;\r\n\r\n\r\nimport React, { useState } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport formData from \"../JSON/formData.json\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst OnePagePerQuestion = () => {\r\n  const { formId } = useParams();\r\n  const form = formData[formId];\r\n  const questions = form?.fields;\r\n  const [answers, setAnswers] = useState({});\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n\r\n  const handleChange = (fieldId, value) => {\r\n    setAnswers({\r\n      ...answers,\r\n      [fieldId]: value,\r\n    });\r\n  };\r\n\r\n  const handleNext = () => {\r\n    setCurrentQuestionIndex((prevIndex) => Math.min(prevIndex + 1, questions.length - 1));\r\n  };\r\n\r\n  const handlePrevious = () => {\r\n    setCurrentQuestionIndex((prevIndex) => Math.max(prevIndex - 1, 0));\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    console.log('Selected Answers:', answers);\r\n  };\r\n\r\n  const currentQuestion = questions[currentQuestionIndex];\r\n\r\n  return (\r\n    <div className=\"container mt-5\">\r\n      <div className=\"row justify-content-center\">\r\n        <div className=\"col-xl-6 col-lg-8 col-md-10 col-sm-12\">\r\n          <div className=\"card shadow-sm\">\r\n            <div className=\"card-body\">\r\n              <h2 className=\"text-center mb-4\">{currentQuestion.label}</h2>\r\n              {currentQuestion.type === 'textbox' && (\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control mb-3\"\r\n                  placeholder={currentQuestion.placeholder}\r\n                  onChange={(e) => handleChange(currentQuestion.fieldId, e.target.value)}\r\n                  required={currentQuestion.required}\r\n                />\r\n              )}\r\n              {currentQuestion.type === 'email' && (\r\n                <input\r\n                  type=\"email\"\r\n                  className=\"form-control mb-3\"\r\n                  placeholder={currentQuestion.placeholder}\r\n                  onChange={(e) => handleChange(currentQuestion.fieldId, e.target.value)}\r\n                  required={currentQuestion.required}\r\n                />\r\n              )}\r\n              {currentQuestion.type === 'date' && (\r\n                <input\r\n                  type=\"date\"\r\n                  className=\"form-control mb-3\"\r\n                  onChange={(e) => handleChange(currentQuestion.fieldId, e.target.value)}\r\n                  required={currentQuestion.required}\r\n                />\r\n              )}\r\n              {currentQuestion.type === 'radio' &&\r\n                currentQuestion.options.map((option) => (\r\n                  <div className=\"form-check mb-2\" key={option.id}>\r\n                    <input\r\n                      className=\"form-check-input\"\r\n                      type=\"radio\"\r\n                      name={currentQuestion.fieldId}\r\n                      value={option.label}\r\n                      onChange={() => handleChange(currentQuestion.fieldId, option.label)}\r\n                      required={currentQuestion.required}\r\n                    />\r\n                    <label className=\"form-check-label\">{option.label}</label>\r\n                  </div>\r\n                ))}\r\n              {currentQuestion.type === 'checkbox' &&\r\n                currentQuestion.options.map((option) => (\r\n                  <div className=\"form-check mb-2\" key={option.id}>\r\n                    <input\r\n                      className=\"form-check-input\"\r\n                      type=\"checkbox\"\r\n                      name={currentQuestion.fieldId}\r\n                      value={option.label}\r\n                      onChange={(e) => {\r\n                        const currentAnswers = answers[currentQuestion.fieldId] || [];\r\n                        if (e.target.checked) {\r\n                          handleChange(currentQuestion.fieldId, [...currentAnswers, option.label]);\r\n                        } else {\r\n                          handleChange(\r\n                            currentQuestion.fieldId,\r\n                            currentAnswers.filter((item) => item !== option.label)\r\n                          );\r\n                        }\r\n                      }}\r\n                      required={currentQuestion.required}\r\n                    />\r\n                    <label className=\"form-check-label\">{option.label}</label>\r\n                  </div>\r\n                ))}\r\n              {currentQuestion.type === 'selectbox' && (\r\n                <select\r\n                  className=\"form-select mb-3\"\r\n                  onChange={(e) => handleChange(currentQuestion.fieldId, e.target.value)}\r\n                  required={currentQuestion.required}\r\n                >\r\n                  <option value=\"\">{currentQuestion.placeholder}</option>\r\n                  {currentQuestion.options.map((option) => (\r\n                    <option key={option.id} value={option.label}>\r\n                      {option.label}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              )}\r\n              {currentQuestion.type === 'textarea' && (\r\n                <textarea\r\n                  className=\"form-control mb-3\"\r\n                  placeholder={currentQuestion.placeholder}\r\n                  onChange={(e) => handleChange(currentQuestion.fieldId, e.target.value)}\r\n                  required={currentQuestion.required}\r\n                />\r\n              )}\r\n              <div className=\"d-flex justify-content-between\">\r\n                <button\r\n                  className=\"btn btn-secondary\"\r\n                  onClick={handlePrevious}\r\n                  disabled={currentQuestionIndex === 0}\r\n                >\r\n                  Previous\r\n                </button>\r\n                {currentQuestionIndex === questions.length - 1 ? (\r\n                  <button className=\"btn btn-primary\" onClick={handleSubmit}>\r\n                    Submit\r\n                  </button>\r\n                ) : (\r\n                  <button\r\n                    className=\"btn btn-primary\"\r\n                    onClick={handleNext}\r\n                    disabled={currentQuestionIndex === questions.length - 1}\r\n                  >\r\n                    Next\r\n                  </button>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OnePagePerQuestion;\r\n\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,sCAAsC;AAC7C,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,SAASC,SAAS,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAM;IAAEC;EAAO,CAAC,GAAGL,SAAS,CAAC,CAAC;EAC9B,MAAMM,IAAI,GAAGP,QAAQ,CAACM,MAAM,CAAC;EAC7B,MAAME,SAAS,GAAGD,IAAI,aAAJA,IAAI,uBAAJA,I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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}