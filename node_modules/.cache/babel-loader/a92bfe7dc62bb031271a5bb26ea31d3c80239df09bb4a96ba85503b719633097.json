{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJECTS\\\\PERSONAL PROJECTS\\\\New folder (2)\\\\veuz\\\\src\\\\Components\\\\AllQuestions.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport formData from \"../JSON/formData.json\";\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AllQuestions = () => {\n  _s();\n  const {\n    formId\n  } = useParams();\n  const form = formData[formId];\n  const questions = form === null || form === void 0 ? void 0 : form.fields;\n  const [answers, setAnswers] = useState({});\n  const [errors, setErrors] = useState({});\n  const handleChange = (fieldId, value) => {\n    setAnswers({\n      ...answers,\n      [fieldId]: value\n    });\n\n    // Clear errors when user modifies the input\n    setErrors(prevErrors => ({\n      ...prevErrors,\n      [fieldId]: ''\n    }));\n  };\n  const validateField = (field, value) => {\n    const {\n      type,\n      required\n    } = field;\n    if (required && (!value || value.trim() === '')) {\n      return \"This field is required.\";\n    }\n    if (type === 'email') {\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailRegex.test(value)) {\n        return \"Please enter a valid email address.\";\n      }\n    }\n    if (type === 'textbox' && field.validation) {\n      const regex = new RegExp(field.validation);\n      if (!regex.test(value)) {\n        return field.validationMessage || \"Invalid input format.\";\n      }\n    }\n    return '';\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    const newErrors = {};\n    questions.forEach(question => {\n      const value = answers[question.fieldId] || '';\n      const error = validateField(question, value);\n      if (error) {\n        newErrors[question.fieldId] = error;\n      }\n    });\n    if (Object.keys(newErrors).length > 0) {\n      setErrors(newErrors);\n      console.log('Validation failed:', newErrors);\n    } else {\n      console.log('Selected Answers:', answers);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container my-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-center mb-4\",\n      children: \"All Questions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"row\",\n      children: [questions.map((question, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-12 col-md-6 mb-4\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card shadow-sm p-3 h-100\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"form-label fw-bold\",\n            children: question.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 29\n          }, this), question.type === 'textbox' && /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: `form-control ${errors[question.fieldId] ? 'is-invalid' : ''}`,\n            placeholder: question.placeholder,\n            onChange: e => handleChange(question.fieldId, e.target.value),\n            required: question.required\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 33\n          }, this), question.type === 'email' && /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            className: `form-control ${errors[question.fieldId] ? 'is-invalid' : ''}`,\n            placeholder: question.placeholder,\n            onChange: e => handleChange(question.fieldId, e.target.value),\n            required: question.required\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 33\n          }, this), question.type === 'date' && /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            className: `form-control ${errors[question.fieldId] ? 'is-invalid' : ''}`,\n            onChange: e => handleChange(question.fieldId, e.target.value),\n            required: question.required\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 33\n          }, this), question.type === 'radio' && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: question.options.map(option => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-check\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                className: `form-check-input ${errors[question.fieldId] ? 'is-invalid' : ''}`,\n                type: \"radio\",\n                name: question.fieldId,\n                value: option.label,\n                onChange: () => handleChange(question.fieldId, option.label),\n                required: question.required\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"form-check-label\",\n                children: option.label\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 45\n              }, this)]\n            }, option.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 41\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 33\n          }, this), question.type === 'checkbox' && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: question.options.map(option => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-check\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                className: `form-check-input ${errors[question.fieldId] ? 'is-invalid' : ''}`,\n                type: \"checkbox\",\n                name: question.fieldId,\n                value: option.label,\n                required: question.required,\n                onChange: e => {\n                  const currentAnswers = answers[question.fieldId] || [];\n                  if (e.target.checked) {\n                    handleChange(question.fieldId, [...currentAnswers, option.label]);\n                  } else {\n                    handleChange(question.fieldId, currentAnswers.filter(item => item !== option.label));\n                  }\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"form-check-label\",\n                children: option.label\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 45\n              }, this)]\n            }, option.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 41\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 33\n          }, this), question.type === 'selectbox' && /*#__PURE__*/_jsxDEV(\"select\", {\n            className: `form-select ${errors[question.fieldId] ? 'is-invalid' : ''}`,\n            required: question.required,\n            onChange: e => handleChange(question.fieldId, e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: question.placeholder\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 37\n            }, this), question.options.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: option.label,\n              children: option.label\n            }, option.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 41\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 33\n          }, this), question.type === 'textarea' && /*#__PURE__*/_jsxDEV(\"textarea\", {\n            className: `form-control ${errors[question.fieldId] ? 'is-invalid' : ''}`,\n            required: question.required,\n            placeholder: question.placeholder,\n            onChange: e => handleChange(question.fieldId, e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 33\n          }, this), errors[question.fieldId] && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"invalid-feedback\",\n            children: errors[question.fieldId]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 25\n        }, this)\n      }, question.fieldId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-12 text-center mt-4\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn btn-primary px-5\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n};\n_s(AllQuestions, \"pN7/nkcMAp9oqmMH9JxVVfaRX44=\", false, function () {\n  return [useParams];\n});\n_c = AllQuestions;\nexport default AllQuestions;\nvar _c;\n$RefreshReg$(_c, \"AllQuestions\");","map":{"version":3,"names":["React","useState","formData","useParams","jsxDEV","_jsxDEV","AllQuestions","_s","formId","form","questions","fields","answers","setAnswers","errors","setErrors","handleChange","fieldId","value","prevErrors","validateField","field","type","required","trim","emailRegex","test","validation","regex","RegExp","validationMessage","handleSubmit","event","preventDefault","newErrors","forEach","question","error","Object","keys","length","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","map","index","label","placeholder","onChange","e","target","options","option","name","id","currentAnswers","checked","filter","item","_c","$RefreshReg$"],"sources":["D:/PROJECTS/PERSONAL PROJECTS/New folder (2)/veuz/src/Components/AllQuestions.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport formData from \"../JSON/formData.json\";\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst AllQuestions = () => {\r\n    const { formId } = useParams();\r\n    const form = formData[formId];\r\n    const questions = form?.fields;\r\n    const [answers, setAnswers] = useState({});\r\n    const [errors, setErrors] = useState({});\r\n\r\n    const handleChange = (fieldId, value) => {\r\n        setAnswers({\r\n            ...answers,\r\n            [fieldId]: value,\r\n        });\r\n\r\n        // Clear errors when user modifies the input\r\n        setErrors((prevErrors) => ({\r\n            ...prevErrors,\r\n            [fieldId]: '',\r\n        }));\r\n    };\r\n\r\n    const validateField = (field, value) => {\r\n        const { type, required } = field;\r\n\r\n        if (required && (!value || value.trim() === '')) {\r\n            return \"This field is required.\";\r\n        }\r\n\r\n        if (type === 'email') {\r\n            const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n            if (!emailRegex.test(value)) {\r\n                return \"Please enter a valid email address.\";\r\n            }\r\n        }\r\n\r\n        if (type === 'textbox' && field.validation) {\r\n            const regex = new RegExp(field.validation);\r\n            if (!regex.test(value)) {\r\n                return field.validationMessage || \"Invalid input format.\";\r\n            }\r\n        }\r\n\r\n        return '';\r\n    };\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        const newErrors = {};\r\n\r\n        questions.forEach((question) => {\r\n            const value = answers[question.fieldId] || '';\r\n            const error = validateField(question, value);\r\n            if (error) {\r\n                newErrors[question.fieldId] = error;\r\n            }\r\n        });\r\n\r\n        if (Object.keys(newErrors).length > 0) {\r\n            setErrors(newErrors);\r\n            console.log('Validation failed:', newErrors);\r\n        } else {\r\n            console.log('Selected Answers:', answers);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"container my-4\">\r\n            <h2 className=\"text-center mb-4\">All Questions</h2>\r\n            <form onSubmit={handleSubmit} className=\"row\">\r\n                {questions.map((question, index) => (\r\n                    <div key={question.fieldId} className=\"col-12 col-md-6 mb-4\">\r\n                        <div className=\"card shadow-sm p-3 h-100\">\r\n                            <label className=\"form-label fw-bold\">{question.label}</label>\r\n                            {question.type === 'textbox' && (\r\n                                <input\r\n                                    type=\"text\"\r\n                                    className={`form-control ${errors[question.fieldId] ? 'is-invalid' : ''}`}\r\n                                    placeholder={question.placeholder}\r\n                                    onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n                                    required={question.required}\r\n                                />\r\n                            )}\r\n                            {question.type === 'email' && (\r\n                                <input\r\n                                    type=\"email\"\r\n                                    className={`form-control ${errors[question.fieldId] ? 'is-invalid' : ''}`}\r\n                                    placeholder={question.placeholder}\r\n                                    onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n                                    required={question.required}\r\n                                />\r\n                            )}\r\n                            {question.type === 'date' && (\r\n                                <input\r\n                                    type=\"date\"\r\n                                    className={`form-control ${errors[question.fieldId] ? 'is-invalid' : ''}`}\r\n                                    onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n                                    required={question.required}\r\n                                />\r\n                            )}\r\n                            {question.type === 'radio' && (\r\n                                <div>\r\n                                    {question.options.map((option) => (\r\n                                        <div key={option.id} className=\"form-check\">\r\n                                            <input\r\n                                                className={`form-check-input ${errors[question.fieldId] ? 'is-invalid' : ''}`}\r\n                                                type=\"radio\"\r\n                                                name={question.fieldId}\r\n                                                value={option.label}\r\n                                                onChange={() => handleChange(question.fieldId, option.label)}\r\n                                                required={question.required}\r\n                                            />\r\n                                            <label className=\"form-check-label\">{option.label}</label>\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            )}\r\n                            {question.type === 'checkbox' && (\r\n                                <div>\r\n                                    {question.options.map((option) => (\r\n                                        <div key={option.id} className=\"form-check\">\r\n                                            <input\r\n                                                className={`form-check-input ${errors[question.fieldId] ? 'is-invalid' : ''}`}\r\n                                                type=\"checkbox\"\r\n                                                name={question.fieldId}\r\n                                                value={option.label}\r\n                                                required={question.required}\r\n                                                onChange={(e) => {\r\n                                                    const currentAnswers = answers[question.fieldId] || [];\r\n                                                    if (e.target.checked) {\r\n                                                        handleChange(question.fieldId, [...currentAnswers, option.label]);\r\n                                                    } else {\r\n                                                        handleChange(\r\n                                                            question.fieldId,\r\n                                                            currentAnswers.filter((item) => item !== option.label)\r\n                                                        );\r\n                                                    }\r\n                                                }}\r\n                                            />\r\n                                            <label className=\"form-check-label\">{option.label}</label>\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            )}\r\n                            {question.type === 'selectbox' && (\r\n                                <select\r\n                                    className={`form-select ${errors[question.fieldId] ? 'is-invalid' : ''}`}\r\n                                    required={question.required}\r\n                                    onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n                                >\r\n                                    <option value=\"\">{question.placeholder}</option>\r\n                                    {question.options.map((option) => (\r\n                                        <option key={option.id} value={option.label}>\r\n                                            {option.label}\r\n                                        </option>\r\n                                    ))}\r\n                                </select>\r\n                            )}\r\n                            {question.type === 'textarea' && (\r\n                                <textarea\r\n                                    className={`form-control ${errors[question.fieldId] ? 'is-invalid' : ''}`}\r\n                                    required={question.required}\r\n                                    placeholder={question.placeholder}\r\n                                    onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n                                />\r\n                            )}\r\n                            {errors[question.fieldId] && (\r\n                                <div className=\"invalid-feedback\">{errors[question.fieldId]}</div>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n                <div className=\"col-12 text-center mt-4\">\r\n                    <button type=\"submit\" className=\"btn btn-primary px-5\">\r\n                        Submit\r\n                    </button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AllQuestions;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}