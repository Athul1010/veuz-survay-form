{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJECTS\\\\PERSONAL PROJECTS\\\\New folder (2)\\\\veuz\\\\src\\\\Components\\\\AllQuestions.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport formData from \"../JSON/formData.json\";\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AllQuestions = () => {\n  _s();\n  const {\n    formId\n  } = useParams();\n  const form = formData[formId];\n  const questions = form === null || form === void 0 ? void 0 : form.fields;\n  const [answers, setAnswers] = useState({});\n  const [errors, setErrors] = useState({});\n  const handleChange = (fieldId, value) => {\n    setAnswers({\n      ...answers,\n      [fieldId]: value\n    });\n  };\n  const validateInput = () => {\n    const newErrors = {};\n    questions.forEach(question => {\n      const value = answers[question.fieldId] || '';\n\n      // Validate based on the question type\n      if (question.required && !value) {\n        newErrors[question.fieldId] = 'This field is required.';\n      } else if (question.type === 'textbox' && value && !/^[A-Za-z\\s]+$/.test(value)) {\n        newErrors[question.fieldId] = 'Only letters and spaces are allowed.';\n      } else if (question.type === 'email' && value && !/^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/.test(value)) {\n        newErrors[question.fieldId] = 'Please enter a valid email address.';\n      }\n    });\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (validateInput()) {\n      console.log('Selected Answers:', answers);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container my-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-center mb-4\",\n      children: \"All Questions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"row\",\n      children: [questions.map((question, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-12 col-md-6 mb-4\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card shadow-sm p-3 h-100\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"form-label fw-bold\",\n            children: question.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 29\n          }, this), question.type === 'textbox' && /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"form-control\",\n            placeholder: question.placeholder,\n            onChange: e => handleChange(question.fieldId, e.target.value),\n            required: question.required\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 33\n          }, this), question.type === 'email' && /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            className: \"form-control\",\n            placeholder: question.placeholder,\n            onChange: e => handleChange(question.fieldId, e.target.value),\n            required: question.required\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 33\n          }, this), question.type === 'date' && /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            className: \"form-control\",\n            onChange: e => handleChange(question.fieldId, e.target.value),\n            required: question.required\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 33\n          }, this), question.type === 'radio' && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: question.options.map(option => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-check\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"form-check-input\",\n                type: \"radio\",\n                name: question.fieldId,\n                value: option.label,\n                onChange: () => handleChange(question.fieldId, option.label),\n                required: question.required\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"form-check-label\",\n                children: option.label\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 45\n              }, this)]\n            }, option.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 41\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 33\n          }, this), question.type === 'checkbox' && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: question.options.map(option => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-check\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"form-check-input\",\n                type: \"checkbox\",\n                name: question.fieldId,\n                value: option.label,\n                required: question.required,\n                onChange: e => {\n                  const currentAnswers = answers[question.fieldId] || [];\n                  if (e.target.checked) {\n                    handleChange(question.fieldId, [...currentAnswers, option.label]);\n                  } else {\n                    handleChange(question.fieldId, currentAnswers.filter(item => item !== option.label));\n                  }\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 101,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"form-check-label\",\n                children: option.label\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 45\n              }, this)]\n            }, option.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 41\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 33\n          }, this), question.type === 'selectbox' && /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"form-select\",\n            required: question.required,\n            onChange: e => handleChange(question.fieldId, e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: question.placeholder\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 37\n            }, this), question.options.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: option.label,\n              children: option.label\n            }, option.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 41\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 33\n          }, this), question.type === 'textarea' && /*#__PURE__*/_jsxDEV(\"textarea\", {\n            className: \"form-control\",\n            required: question.required,\n            placeholder: question.placeholder,\n            onChange: e => handleChange(question.fieldId, e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 33\n          }, this), errors[question.fieldId] && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-danger mt-2\",\n            children: errors[question.fieldId]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 25\n        }, this)\n      }, question.fieldId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-12 text-center mt-4\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn btn-primary px-5\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n_s(AllQuestions, \"pN7/nkcMAp9oqmMH9JxVVfaRX44=\", false, function () {\n  return [useParams];\n});\n_c = AllQuestions;\nexport default AllQuestions;\nvar _c;\n$RefreshReg$(_c, \"AllQuestions\");","map":{"version":3,"names":["React","useState","formData","useParams","jsxDEV","_jsxDEV","AllQuestions","_s","formId","form","questions","fields","answers","setAnswers","errors","setErrors","handleChange","fieldId","value","validateInput","newErrors","forEach","question","required","type","test","Object","keys","length","handleSubmit","event","preventDefault","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","map","index","label","placeholder","onChange","e","target","options","option","name","id","currentAnswers","checked","filter","item","_c","$RefreshReg$"],"sources":["D:/PROJECTS/PERSONAL PROJECTS/New folder (2)/veuz/src/Components/AllQuestions.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport formData from \"../JSON/formData.json\";\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst AllQuestions = () => {\r\n    const { formId } = useParams();\r\n    const form = formData[formId];\r\n    const questions = form?.fields;\r\n    const [answers, setAnswers] = useState({});\r\n    const [errors, setErrors] = useState({});\r\n\r\n    const handleChange = (fieldId, value) => {\r\n        setAnswers({\r\n            ...answers,\r\n            [fieldId]: value,\r\n        });\r\n    };\r\n\r\n    const validateInput = () => {\r\n        const newErrors = {};\r\n\r\n        questions.forEach((question) => {\r\n            const value = answers[question.fieldId] || '';\r\n            \r\n            // Validate based on the question type\r\n            if (question.required && !value) {\r\n                newErrors[question.fieldId] = 'This field is required.';\r\n            } else if (question.type === 'textbox' && value && !/^[A-Za-z\\s]+$/.test(value)) {\r\n                newErrors[question.fieldId] = 'Only letters and spaces are allowed.';\r\n            } else if (question.type === 'email' && value && !/^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/.test(value)) {\r\n                newErrors[question.fieldId] = 'Please enter a valid email address.';\r\n            }\r\n        });\r\n\r\n        setErrors(newErrors);\r\n        return Object.keys(newErrors).length === 0;\r\n    };\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (validateInput()) {\r\n            console.log('Selected Answers:', answers);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"container my-4\">\r\n            <h2 className=\"text-center mb-4\">All Questions</h2>\r\n            <form onSubmit={handleSubmit} className=\"row\">\r\n                {questions.map((question, index) => (\r\n                    <div key={question.fieldId} className=\"col-12 col-md-6 mb-4\">\r\n                        <div className=\"card shadow-sm p-3 h-100\">\r\n                            <label className=\"form-label fw-bold\">{question.label}</label>\r\n                            {question.type === 'textbox' && (\r\n                                <input\r\n                                    type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    placeholder={question.placeholder}\r\n                                    onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n                                    required={question.required}\r\n                                />\r\n                            )}\r\n                            {question.type === 'email' && (\r\n                                <input\r\n                                    type=\"email\"\r\n                                    className=\"form-control\"\r\n                                    placeholder={question.placeholder}\r\n                                    onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n                                    required={question.required}\r\n                                />\r\n                            )}\r\n                            {question.type === 'date' && (\r\n                                <input\r\n                                    type=\"date\"\r\n                                    className=\"form-control\"\r\n                                    onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n                                    required={question.required}\r\n                                />\r\n                            )}\r\n                            {question.type === 'radio' && (\r\n                                <div>\r\n                                    {question.options.map((option) => (\r\n                                        <div key={option.id} className=\"form-check\">\r\n                                            <input\r\n                                                className=\"form-check-input\"\r\n                                                type=\"radio\"\r\n                                                name={question.fieldId}\r\n                                                value={option.label}\r\n                                                onChange={() => handleChange(question.fieldId, option.label)}\r\n                                                required={question.required}\r\n                                            />\r\n                                            <label className=\"form-check-label\">{option.label}</label>\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            )}\r\n                            {question.type === 'checkbox' && (\r\n                                <div>\r\n                                    {question.options.map((option) => (\r\n                                        <div key={option.id} className=\"form-check\">\r\n                                            <input\r\n                                                className=\"form-check-input\"\r\n                                                type=\"checkbox\"\r\n                                                name={question.fieldId}\r\n                                                value={option.label}\r\n                                                required={question.required}\r\n                                                onChange={(e) => {\r\n                                                    const currentAnswers = answers[question.fieldId] || [];\r\n                                                    if (e.target.checked) {\r\n                                                        handleChange(question.fieldId, [...currentAnswers, option.label]);\r\n                                                    } else {\r\n                                                        handleChange(\r\n                                                            question.fieldId,\r\n                                                            currentAnswers.filter((item) => item !== option.label)\r\n                                                        );\r\n                                                    }\r\n                                                }}\r\n                                            />\r\n                                            <label className=\"form-check-label\">{option.label}</label>\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            )}\r\n                            {question.type === 'selectbox' && (\r\n                                <select\r\n                                    className=\"form-select\"\r\n                                    required={question.required}\r\n                                    onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n                                >\r\n                                    <option value=\"\">{question.placeholder}</option>\r\n                                    {question.options.map((option) => (\r\n                                        <option key={option.id} value={option.label}>\r\n                                            {option.label}\r\n                                        </option>\r\n                                    ))}\r\n                                </select>\r\n                            )}\r\n                            {question.type === 'textarea' && (\r\n                                <textarea\r\n                                    className=\"form-control\"\r\n                                    required={question.required}\r\n                                    placeholder={question.placeholder}\r\n                                    onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n                                />\r\n                            )}\r\n                            {errors[question.fieldId] && (\r\n                                <div className=\"text-danger mt-2\">{errors[question.fieldId]}</div>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n                <div className=\"col-12 text-center mt-4\">\r\n                    <button type=\"submit\" className=\"btn btn-primary px-5\">\r\n                        Submit\r\n                    </button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AllQuestions;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}