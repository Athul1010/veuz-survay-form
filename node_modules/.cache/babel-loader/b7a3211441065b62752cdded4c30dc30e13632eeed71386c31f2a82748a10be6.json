{"ast":null,"code":"// import React, { useState } from 'react';\n// import 'bootstrap/dist/css/bootstrap.min.css';\n// import formData from \"../JSON/formData.json\";\n// import { useParams } from \"react-router-dom\";\n\n// const OnePagePerQuestion = () => {\n//   const { formId } = useParams();\n//   const form = formData[formId];\n//   const questions = form?.fields;\n//   const [answers, setAnswers] = useState({});\n\n//   const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n//   const [errors, setErrors] = useState({});\n\n//   const handleChange = (fieldId, value) => {\n//     setAnswers({\n//       ...answers,\n//       [fieldId]: value,\n//     });\n//   };\n\n//   const validateInput = () => {\n//     const currentQuestion = questions[currentQuestionIndex];\n//     const value = answers[currentQuestion.fieldId] || '';\n//     const newErrors = {};\n\n//     // Validate based on the question type\n//     if (!value) {\n//       newErrors[currentQuestion.fieldId] = 'This field is required.';\n//     } else if (currentQuestion.type === 'textbox' && !/^[A-Za-z\\s]+$/.test(value)) {\n//       newErrors[currentQuestion.fieldId] = 'Only letters and spaces are allowed.';\n//     } else if (currentQuestion.type === 'email' && !/^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/.test(value)) {\n//       newErrors[currentQuestion.fieldId] = 'Please enter a valid email address.';\n//     } \n\n//     setErrors(newErrors);\n//     return Object.keys(newErrors).length === 0;\n//   };\n\n//   const handleNext = () => {\n//     if (validateInput()) {\n//       setCurrentQuestionIndex((prevIndex) => Math.min(prevIndex + 1, questions.length - 1));\n//     }\n//   };\n\n//   const handlePrevious = () => {\n//     setCurrentQuestionIndex((prevIndex) => Math.max(prevIndex - 1, 0));\n//   };\n\n//   const handleSubmit = () => {\n//     if (validateInput()) {\n//       console.log('Selected Answers:', answers);\n//     }\n//   };\n\n//   const currentQuestion = questions[currentQuestionIndex];\n\n//   return (\n//     <div className=\"container mt-5\">\n//       <div className=\"row justify-content-center\">\n//         <div className=\"col-xl-6 col-lg-8 col-md-10 col-sm-12\">\n//           <div className=\"card shadow-sm\">\n//             <div className=\"card-body\">\n//               <h2 className=\"text-center mb-4\">{currentQuestion.label}</h2>\n//               {currentQuestion.type === 'textbox' && (\n//                 <input\n//                   type=\"text\"\n//                   className=\"form-control mb-3\"\n//                   placeholder={currentQuestion.placeholder}\n//                   onChange={(e) => handleChange(currentQuestion.fieldId, e.target.value)}\n//                   required\n//                 />\n//               )}\n//               {currentQuestion.type === 'email' && (\n//                 <input\n//                   type=\"email\"\n//                   className=\"form-control mb-3\"\n//                   placeholder={currentQuestion.placeholder}\n//                   onChange={(e) => handleChange(currentQuestion.fieldId, e.target.value)}\n//                   required\n//                 />\n//               )}\n//               {currentQuestion.type === 'date' && (\n//                 <input\n//                   type=\"date\"\n//                   className=\"form-control mb-3\"\n//                   onChange={(e) => handleChange(currentQuestion.fieldId, e.target.value)}\n//                   required\n//                 />\n//               )}\n//               {currentQuestion.type === 'radio' &&\n//                 currentQuestion.options.map((option) => (\n//                   <div className=\"form-check mb-2\" key={option.id}>\n//                     <input\n//                       className=\"form-check-input\"\n//                       type=\"radio\"\n//                       name={currentQuestion.fieldId}\n//                       value={option.label}\n//                       onChange={() => handleChange(currentQuestion.fieldId, option.label)}\n//                       required\n//                     />\n//                     <label className=\"form-check-label\">{option.label}</label>\n//                   </div>\n//                 ))}\n//               {currentQuestion.type === 'checkbox' &&\n//                 currentQuestion.options.map((option) => (\n//                   <div className=\"form-check mb-2\" key={option.id}>\n//                     <input\n//                       className=\"form-check-input\"\n//                       type=\"checkbox\"\n//                       name={currentQuestion.fieldId}\n//                       value={option.label}\n//                       onChange={(e) => {\n//                         const currentAnswers = answers[currentQuestion.fieldId] || [];\n//                         if (e.target.checked) {\n//                           handleChange(currentQuestion.fieldId, [...currentAnswers, option.label]);\n//                         } else {\n//                           handleChange(\n//                             currentQuestion.fieldId,\n//                             currentAnswers.filter((item) => item !== option.label)\n//                           );\n//                         }\n//                       }}\n//                       required\n//                     />\n//                     <label className=\"form-check-label\">{option.label}</label>\n//                   </div>\n//                 ))}\n//               {currentQuestion.type === 'selectbox' && (\n//                 <select\n//                   className=\"form-select mb-3\"\n//                   onChange={(e) => handleChange(currentQuestion.fieldId, e.target.value)}\n//                   required={currentQuestion.required}\n//                 >\n//                   <option value=\"\">{currentQuestion.placeholder}</option>\n//                   {currentQuestion.options.map((option) => (\n//                     <option key={option.id} value={option.label}>\n//                       {option.label}\n//                     </option>\n//                   ))}\n//                 </select>\n//               )}\n//               {currentQuestion.type === 'textarea' && (\n//                 <textarea\n//                   className=\"form-control mb-3\"\n//                   placeholder={currentQuestion.placeholder}\n//                   onChange={(e) => handleChange(currentQuestion.fieldId, e.target.value)}\n//                   required={currentQuestion.required}\n//                 />\n//               )}\n//               {errors[currentQuestion.fieldId] && (\n//                 <div className=\"text-danger mt-2\">{errors[currentQuestion.fieldId]}</div>\n//               )}\n//               <div className=\"d-flex justify-content-between\">\n//                 <button\n//                   className=\"btn btn-secondary\"\n//                   onClick={handlePrevious}\n//                   disabled={currentQuestionIndex === 0}\n//                 >\n//                   Previous\n//                 </button>\n//                 {currentQuestionIndex === questions.length - 1 ? (\n//                   <button className=\"btn btn-primary\" onClick={handleSubmit}>\n//                     Submit\n//                   </button>\n//                 ) : (\n//                   <button\n//                     className=\"btn btn-primary\"\n//                     onClick={handleNext}\n//                     disabled={currentQuestionIndex === questions.length - 1}\n//                   >\n//                     Next\n//                   </button>\n//                 )}\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default OnePagePerQuestion;","map":{"version":3,"names":[],"sources":["D:/PROJECTS/PERSONAL PROJECTS/New folder (2)/veuz/src/Components/OnePagePerQuestion.jsx"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import 'bootstrap/dist/css/bootstrap.min.css';\r\n// import formData from \"../JSON/formData.json\";\r\n// import { useParams } from \"react-router-dom\";\r\n\r\n\r\n// const OnePagePerQuestion = () => {\r\n//   const { formId } = useParams();\r\n//   const form = formData[formId];\r\n//   const questions = form?.fields;\r\n//   const [answers, setAnswers] = useState({});\r\n  \r\n//   const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n//   const [errors, setErrors] = useState({});\r\n\r\n//   const handleChange = (fieldId, value) => {\r\n//     setAnswers({\r\n//       ...answers,\r\n//       [fieldId]: value,\r\n//     });\r\n//   };\r\n\r\n//   const validateInput = () => {\r\n//     const currentQuestion = questions[currentQuestionIndex];\r\n//     const value = answers[currentQuestion.fieldId] || '';\r\n//     const newErrors = {};\r\n\r\n//     // Validate based on the question type\r\n//     if (!value) {\r\n//       newErrors[currentQuestion.fieldId] = 'This field is required.';\r\n//     } else if (currentQuestion.type === 'textbox' && !/^[A-Za-z\\s]+$/.test(value)) {\r\n//       newErrors[currentQuestion.fieldId] = 'Only letters and spaces are allowed.';\r\n//     } else if (currentQuestion.type === 'email' && !/^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/.test(value)) {\r\n//       newErrors[currentQuestion.fieldId] = 'Please enter a valid email address.';\r\n//     } \r\n\r\n//     setErrors(newErrors);\r\n//     return Object.keys(newErrors).length === 0;\r\n//   };\r\n\r\n//   const handleNext = () => {\r\n//     if (validateInput()) {\r\n//       setCurrentQuestionIndex((prevIndex) => Math.min(prevIndex + 1, questions.length - 1));\r\n//     }\r\n//   };\r\n\r\n//   const handlePrevious = () => {\r\n//     setCurrentQuestionIndex((prevIndex) => Math.max(prevIndex - 1, 0));\r\n//   };\r\n\r\n//   const handleSubmit = () => {\r\n//     if (validateInput()) {\r\n//       console.log('Selected Answers:', answers);\r\n//     }\r\n//   };\r\n\r\n//   const currentQuestion = questions[currentQuestionIndex];\r\n\r\n//   return (\r\n//     <div className=\"container mt-5\">\r\n//       <div className=\"row justify-content-center\">\r\n//         <div className=\"col-xl-6 col-lg-8 col-md-10 col-sm-12\">\r\n//           <div className=\"card shadow-sm\">\r\n//             <div className=\"card-body\">\r\n//               <h2 className=\"text-center mb-4\">{currentQuestion.label}</h2>\r\n//               {currentQuestion.type === 'textbox' && (\r\n//                 <input\r\n//                   type=\"text\"\r\n//                   className=\"form-control mb-3\"\r\n//                   placeholder={currentQuestion.placeholder}\r\n//                   onChange={(e) => handleChange(currentQuestion.fieldId, e.target.value)}\r\n//                   required\r\n//                 />\r\n//               )}\r\n//               {currentQuestion.type === 'email' && (\r\n//                 <input\r\n//                   type=\"email\"\r\n//                   className=\"form-control mb-3\"\r\n//                   placeholder={currentQuestion.placeholder}\r\n//                   onChange={(e) => handleChange(currentQuestion.fieldId, e.target.value)}\r\n//                   required\r\n//                 />\r\n//               )}\r\n//               {currentQuestion.type === 'date' && (\r\n//                 <input\r\n//                   type=\"date\"\r\n//                   className=\"form-control mb-3\"\r\n//                   onChange={(e) => handleChange(currentQuestion.fieldId, e.target.value)}\r\n//                   required\r\n//                 />\r\n//               )}\r\n//               {currentQuestion.type === 'radio' &&\r\n//                 currentQuestion.options.map((option) => (\r\n//                   <div className=\"form-check mb-2\" key={option.id}>\r\n//                     <input\r\n//                       className=\"form-check-input\"\r\n//                       type=\"radio\"\r\n//                       name={currentQuestion.fieldId}\r\n//                       value={option.label}\r\n//                       onChange={() => handleChange(currentQuestion.fieldId, option.label)}\r\n//                       required\r\n//                     />\r\n//                     <label className=\"form-check-label\">{option.label}</label>\r\n//                   </div>\r\n//                 ))}\r\n//               {currentQuestion.type === 'checkbox' &&\r\n//                 currentQuestion.options.map((option) => (\r\n//                   <div className=\"form-check mb-2\" key={option.id}>\r\n//                     <input\r\n//                       className=\"form-check-input\"\r\n//                       type=\"checkbox\"\r\n//                       name={currentQuestion.fieldId}\r\n//                       value={option.label}\r\n//                       onChange={(e) => {\r\n//                         const currentAnswers = answers[currentQuestion.fieldId] || [];\r\n//                         if (e.target.checked) {\r\n//                           handleChange(currentQuestion.fieldId, [...currentAnswers, option.label]);\r\n//                         } else {\r\n//                           handleChange(\r\n//                             currentQuestion.fieldId,\r\n//                             currentAnswers.filter((item) => item !== option.label)\r\n//                           );\r\n//                         }\r\n//                       }}\r\n//                       required\r\n//                     />\r\n//                     <label className=\"form-check-label\">{option.label}</label>\r\n//                   </div>\r\n//                 ))}\r\n//               {currentQuestion.type === 'selectbox' && (\r\n//                 <select\r\n//                   className=\"form-select mb-3\"\r\n//                   onChange={(e) => handleChange(currentQuestion.fieldId, e.target.value)}\r\n//                   required={currentQuestion.required}\r\n//                 >\r\n//                   <option value=\"\">{currentQuestion.placeholder}</option>\r\n//                   {currentQuestion.options.map((option) => (\r\n//                     <option key={option.id} value={option.label}>\r\n//                       {option.label}\r\n//                     </option>\r\n//                   ))}\r\n//                 </select>\r\n//               )}\r\n//               {currentQuestion.type === 'textarea' && (\r\n//                 <textarea\r\n//                   className=\"form-control mb-3\"\r\n//                   placeholder={currentQuestion.placeholder}\r\n//                   onChange={(e) => handleChange(currentQuestion.fieldId, e.target.value)}\r\n//                   required={currentQuestion.required}\r\n//                 />\r\n//               )}\r\n//               {errors[currentQuestion.fieldId] && (\r\n//                 <div className=\"text-danger mt-2\">{errors[currentQuestion.fieldId]}</div>\r\n//               )}\r\n//               <div className=\"d-flex justify-content-between\">\r\n//                 <button\r\n//                   className=\"btn btn-secondary\"\r\n//                   onClick={handlePrevious}\r\n//                   disabled={currentQuestionIndex === 0}\r\n//                 >\r\n//                   Previous\r\n//                 </button>\r\n//                 {currentQuestionIndex === questions.length - 1 ? (\r\n//                   <button className=\"btn btn-primary\" onClick={handleSubmit}>\r\n//                     Submit\r\n//                   </button>\r\n//                 ) : (\r\n//                   <button\r\n//                     className=\"btn btn-primary\"\r\n//                     onClick={handleNext}\r\n//                     disabled={currentQuestionIndex === questions.length - 1}\r\n//                   >\r\n//                     Next\r\n//                   </button>\r\n//                 )}\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default OnePagePerQuestion;\r\n\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}