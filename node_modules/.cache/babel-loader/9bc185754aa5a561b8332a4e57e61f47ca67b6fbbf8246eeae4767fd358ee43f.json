{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJECTS\\\\PERSONAL PROJECTS\\\\New folder (2)\\\\veuz\\\\src\\\\Components\\\\OnePagePerSection.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import { useParams } from 'react-router-dom';\n// import formData from \"../JSON/formData.json\";\n\n// const OnePagePerSection = () => {\n//     const { formId } = useParams();\n//     const form = formData[formId];\n//     const questions = form?.fields;\n//     const sections = [...new Set(questions.map(q => q.sectionId))];\n//     const [answers, setAnswers] = useState({});\n\n//     const handleChange = (fieldId, value) => {\n//         setAnswers({\n//             ...answers,\n//             [fieldId]: value,\n//         });\n//     };\n\n//     const handleSubmit = () => {\n//         console.log('Selected Answers:', answers);\n//     };\n\n//     return (\n//         <div className=\"container\">\n//             {sections.map(sectionId => (\n//                 <div key={sectionId} className=\"mb-4\">\n//                     <h2 className='text-center'>Section {sectionId}</h2>\n//                     <div className=\"p-3 mt-3\">\n//                         <div className=\"row justify-content-center\">\n//                             {questions.filter(q => q.sectionId === sectionId).map((question) => (\n//                                 <div key={question.fieldId} className=\"col-xl-4 col-lg-4 col-md-6 col-sm-12 mb-3\">\n//                                     <div className=\"card p-3 border\">\n//                                         <label>{question.label}</label>\n//                                         {question.type === 'textbox' && (\n//                                             <input\n//                                                 type=\"text\"\n//                                                 className=\"form-control\"\n//                                                 placeholder={question.placeholder}\n//                                                 onChange={(e) => handleChange(question.fieldId, e.target.value)}\n//                                             />\n//                                         )}\n//                                         {question.type === 'email' && (\n//                                             <input\n//                                                 type=\"email\"\n//                                                 className=\"form-control\"\n//                                                 placeholder={question.placeholder}\n//                                                 onChange={(e) => handleChange(question.fieldId, e.target.value)}\n//                                             />\n//                                         )}\n//                                         {question.type === 'date' && (\n//                                             <input\n//                                                 type=\"date\"\n//                                                 className=\"form-control\"\n//                                                 onChange={(e) => handleChange(question.fieldId, e.target.value)}\n//                                             />\n//                                         )}\n//                                         {question.type === 'radio' && question.options.map(option => (\n//                                             <div key={option.id}>\n//                                                 <input\n//                                                     type=\"radio\"\n//                                                     name={question.fieldId}\n//                                                     value={option.label}\n//                                                     onChange={() => handleChange(question.fieldId, option.label)}\n//                                                 />\n//                                                 <label>{option.label}</label>\n//                                             </div>\n//                                         ))}\n//                                         {question.type === 'checkbox' && question.options.map(option => (\n//                                             <div key={option.id}>\n//                                                 <input\n//                                                     type=\"checkbox\"\n//                                                     name={question.fieldId}\n//                                                     value={option.label}\n//                                                     onChange={(e) => {\n//                                                         const currentAnswers = answers[question.fieldId] || [];\n//                                                         if (e.target.checked) {\n//                                                             handleChange(question.fieldId, [...currentAnswers, option.label]);\n//                                                         } else {\n//                                                             handleChange(question.fieldId, currentAnswers.filter(item => item !== option.label));\n//                                                         }\n//                                                     }}\n//                                                 />\n//                                                 <label>{option.label}</label>\n//                                             </div>\n//                                         ))}\n//                                         {question.type === 'selectbox' && (\n//                                             <select\n//                                                 className=\"form-control\"\n//                                                 onChange={(e) => handleChange(question.fieldId, e.target.value)}\n//                                             >\n//                                                 <option value=\"\">{question.placeholder}</option>\n//                                                 {question.options.map(option => (\n//                                                     <option key={option.id} value={option.label}>{option.label}</option>\n//                                                 ))}\n//                                             </select>\n//                                         )}\n//                                         {question.type === 'textarea' && (\n//                                             <textarea\n//                                                 className=\"form-control\"\n//                                                 placeholder={question.placeholder}\n//                                                 onChange={(e) => handleChange(question.fieldId, e.target.value)}\n//                                             />\n//                                         )}\n//                                     </div>\n//                                 </div>\n//                             ))}\n//                         </div>\n//                     </div>\n//                 </div>\n//             ))}\n//             <div className=\"text-center mt-4\">\n//                 <button className=\"btn btn-primary\" onClick={handleSubmit}>Submit</button>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default OnePagePerSection;\n\nimport React, { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport formData from \"../JSON/formData.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OnePagePerSection = () => {\n  _s();\n  const {\n    formId\n  } = useParams();\n  const form = formData[formId];\n  const questions = form === null || form === void 0 ? void 0 : form.fields;\n  const sections = [...new Set(questions.map(q => q.sectionId))];\n  const [answers, setAnswers] = useState({});\n  const [errors, setErrors] = useState({});\n  const handleChange = (fieldId, value) => {\n    setAnswers({\n      ...answers,\n      [fieldId]: value\n    });\n  };\n  const validateInput = () => {\n    const newErrors = {};\n    questions.forEach(question => {\n      const value = answers[question.fieldId] || '';\n\n      // Check if the field is required\n      if (question.required && !value) {\n        newErrors[question.fieldId] = 'This field is required.';\n      }\n\n      // Validate based on the question type\n      if (question.type === 'textbox' && value && !/^[A-Za-z\\s]+$/.test(value)) {\n        newErrors[question.fieldId] = 'Only letters and spaces are allowed.';\n      } else if (question.type === 'email' && value && !/^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/.test(value)) {\n        newErrors[question.fieldId] = 'Please enter a valid email address.';\n      }\n    });\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n  const handleSubmit = () => {\n    if (validateInput()) {\n      console.log('Selected Answers:', answers);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [sections.map(sectionId => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-center\",\n        children: [\"Section \", sectionId]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-3 mt-3\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row justify-content-center\",\n          children: questions.filter(q => q.sectionId === sectionId).map(question => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-xl-4 col-lg-4 col-md-6 col-sm-12 mb-3\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card p-3 border\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: question.label\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 179,\n                columnNumber: 41\n              }, this), question.type === 'textbox' && /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                className: \"form-control\",\n                placeholder: question.placeholder,\n                onChange: e => handleChange(question.fieldId, e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 181,\n                columnNumber: 45\n              }, this), question.type === 'email' && /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"email\",\n                className: \"form-control\",\n                placeholder: question.placeholder,\n                onChange: e => handleChange(question.fieldId, e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 189,\n                columnNumber: 45\n              }, this), question.type === 'date' && /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"date\",\n                className: \"form-control\",\n                onChange: e => handleChange(question.fieldId, e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 197,\n                columnNumber: 45\n              }, this), question.type === 'radio' && question.options.map(option => /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"radio\",\n                  name: question.fieldId,\n                  value: option.label,\n                  onChange: () => handleChange(question.fieldId, option.label)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 205,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: option.label\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 211,\n                  columnNumber: 49\n                }, this)]\n              }, option.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 204,\n                columnNumber: 45\n              }, this)), question.type === 'checkbox' && question.options.map(option => /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  name: question.fieldId,\n                  value: option.label,\n                  onChange: e => {\n                    const currentAnswers = answers[question.fieldId] || [];\n                    if (e.target.checked) {\n                      handleChange(question.fieldId, [...currentAnswers, option.label]);\n                    } else {\n                      handleChange(question.fieldId, currentAnswers.filter(item => item !== option.label));\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 216,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: option.label\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 229,\n                  columnNumber: 49\n                }, this)]\n              }, option.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 215,\n                columnNumber: 45\n              }, this)), question.type === 'selectbox' && /*#__PURE__*/_jsxDEV(\"select\", {\n                className: \"form-control\",\n                onChange: e => handleChange(question.fieldId, e.target.value),\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: question.placeholder\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 237,\n                  columnNumber: 49\n                }, this), question.options.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: option.label,\n                  children: option.label\n                }, option.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 239,\n                  columnNumber: 53\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 233,\n                columnNumber: 45\n              }, this), question.type === 'textarea' && /*#__PURE__*/_jsxDEV(\"textarea\", {\n                className: \"form-control\",\n                placeholder: question.placeholder,\n                onChange: e => handleChange(question.fieldId, e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 244,\n                columnNumber: 45\n              }, this), errors[question.fieldId] && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-danger mt-2\",\n                children: errors[question.fieldId]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 252,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 37\n            }, this)\n          }, question.fieldId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 21\n      }, this)]\n    }, sectionId, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center mt-4\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: handleSubmit,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 9\n  }, this);\n};\n_s(OnePagePerSection, \"pN7/nkcMAp9oqmMH9JxVVfaRX44=\", false, function () {\n  return [useParams];\n});\n_c = OnePagePerSection;\nexport default OnePagePerSection;\nvar _c;\n$RefreshReg$(_c, \"OnePagePerSection\");","map":{"version":3,"names":["React","useState","useParams","formData","jsxDEV","_jsxDEV","OnePagePerSection","_s","formId","form","questions","fields","sections","Set","map","q","sectionId","answers","setAnswers","errors","setErrors","handleChange","fieldId","value","validateInput","newErrors","forEach","question","required","type","test","Object","keys","length","handleSubmit","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","filter","label","placeholder","onChange","e","target","options","option","name","id","currentAnswers","checked","item","onClick","_c","$RefreshReg$"],"sources":["D:/PROJECTS/PERSONAL PROJECTS/New folder (2)/veuz/src/Components/OnePagePerSection.jsx"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import { useParams } from 'react-router-dom';\r\n// import formData from \"../JSON/formData.json\";\r\n\r\n// const OnePagePerSection = () => {\r\n//     const { formId } = useParams();\r\n//     const form = formData[formId];\r\n//     const questions = form?.fields;\r\n//     const sections = [...new Set(questions.map(q => q.sectionId))];\r\n//     const [answers, setAnswers] = useState({});\r\n\r\n//     const handleChange = (fieldId, value) => {\r\n//         setAnswers({\r\n//             ...answers,\r\n//             [fieldId]: value,\r\n//         });\r\n//     };\r\n\r\n//     const handleSubmit = () => {\r\n//         console.log('Selected Answers:', answers);\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"container\">\r\n//             {sections.map(sectionId => (\r\n//                 <div key={sectionId} className=\"mb-4\">\r\n//                     <h2 className='text-center'>Section {sectionId}</h2>\r\n//                     <div className=\"p-3 mt-3\">\r\n//                         <div className=\"row justify-content-center\">\r\n//                             {questions.filter(q => q.sectionId === sectionId).map((question) => (\r\n//                                 <div key={question.fieldId} className=\"col-xl-4 col-lg-4 col-md-6 col-sm-12 mb-3\">\r\n//                                     <div className=\"card p-3 border\">\r\n//                                         <label>{question.label}</label>\r\n//                                         {question.type === 'textbox' && (\r\n//                                             <input\r\n//                                                 type=\"text\"\r\n//                                                 className=\"form-control\"\r\n//                                                 placeholder={question.placeholder}\r\n//                                                 onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n//                                             />\r\n//                                         )}\r\n//                                         {question.type === 'email' && (\r\n//                                             <input\r\n//                                                 type=\"email\"\r\n//                                                 className=\"form-control\"\r\n//                                                 placeholder={question.placeholder}\r\n//                                                 onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n//                                             />\r\n//                                         )}\r\n//                                         {question.type === 'date' && (\r\n//                                             <input\r\n//                                                 type=\"date\"\r\n//                                                 className=\"form-control\"\r\n//                                                 onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n//                                             />\r\n//                                         )}\r\n//                                         {question.type === 'radio' && question.options.map(option => (\r\n//                                             <div key={option.id}>\r\n//                                                 <input\r\n//                                                     type=\"radio\"\r\n//                                                     name={question.fieldId}\r\n//                                                     value={option.label}\r\n//                                                     onChange={() => handleChange(question.fieldId, option.label)}\r\n//                                                 />\r\n//                                                 <label>{option.label}</label>\r\n//                                             </div>\r\n//                                         ))}\r\n//                                         {question.type === 'checkbox' && question.options.map(option => (\r\n//                                             <div key={option.id}>\r\n//                                                 <input\r\n//                                                     type=\"checkbox\"\r\n//                                                     name={question.fieldId}\r\n//                                                     value={option.label}\r\n//                                                     onChange={(e) => {\r\n//                                                         const currentAnswers = answers[question.fieldId] || [];\r\n//                                                         if (e.target.checked) {\r\n//                                                             handleChange(question.fieldId, [...currentAnswers, option.label]);\r\n//                                                         } else {\r\n//                                                             handleChange(question.fieldId, currentAnswers.filter(item => item !== option.label));\r\n//                                                         }\r\n//                                                     }}\r\n//                                                 />\r\n//                                                 <label>{option.label}</label>\r\n//                                             </div>\r\n//                                         ))}\r\n//                                         {question.type === 'selectbox' && (\r\n//                                             <select\r\n//                                                 className=\"form-control\"\r\n//                                                 onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n//                                             >\r\n//                                                 <option value=\"\">{question.placeholder}</option>\r\n//                                                 {question.options.map(option => (\r\n//                                                     <option key={option.id} value={option.label}>{option.label}</option>\r\n//                                                 ))}\r\n//                                             </select>\r\n//                                         )}\r\n//                                         {question.type === 'textarea' && (\r\n//                                             <textarea\r\n//                                                 className=\"form-control\"\r\n//                                                 placeholder={question.placeholder}\r\n//                                                 onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n//                                             />\r\n//                                         )}\r\n//                                     </div>\r\n//                                 </div>\r\n//                             ))}\r\n//                         </div>\r\n//                     </div>\r\n//                 </div>\r\n//             ))}\r\n//             <div className=\"text-center mt-4\">\r\n//                 <button className=\"btn btn-primary\" onClick={handleSubmit}>Submit</button>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default OnePagePerSection;\r\n\r\n\r\nimport React, { useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport formData from \"../JSON/formData.json\";\r\n\r\nconst OnePagePerSection = () => {\r\n    const { formId } = useParams();\r\n    const form = formData[formId];\r\n    const questions = form?.fields;\r\n    const sections = [...new Set(questions.map(q => q.sectionId))];\r\n    const [answers, setAnswers] = useState({});\r\n    const [errors, setErrors] = useState({});\r\n\r\n    const handleChange = (fieldId, value) => {\r\n        setAnswers({\r\n            ...answers,\r\n            [fieldId]: value,\r\n        });\r\n    };\r\n\r\n    const validateInput = () => {\r\n        const newErrors = {};\r\n\r\n        questions.forEach((question) => {\r\n            const value = answers[question.fieldId] || '';\r\n\r\n            // Check if the field is required\r\n            if (question.required && !value) {\r\n                newErrors[question.fieldId] = 'This field is required.';\r\n            }\r\n\r\n            // Validate based on the question type\r\n            if (question.type === 'textbox' && value && !/^[A-Za-z\\s]+$/.test(value)) {\r\n                newErrors[question.fieldId] = 'Only letters and spaces are allowed.';\r\n            } else if (question.type === 'email' && value && !/^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/.test(value)) {\r\n                newErrors[question.fieldId] = 'Please enter a valid email address.';\r\n            }\r\n        });\r\n\r\n        setErrors(newErrors);\r\n        return Object.keys(newErrors).length === 0;\r\n    };\r\n\r\n    const handleSubmit = () => {\r\n        if (validateInput()) {\r\n            console.log('Selected Answers:', answers);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            {sections.map(sectionId => (\r\n                <div key={sectionId} className=\"mb-4\">\r\n                    <h2 className='text-center'>Section {sectionId}</h2>\r\n                    <div className=\"p-3 mt-3\">\r\n                        <div className=\"row justify-content-center\">\r\n                            {questions.filter(q => q.sectionId === sectionId).map((question) => (\r\n                                <div key={question.fieldId} className=\"col-xl-4 col-lg-4 col-md-6 col-sm-12 mb-3\">\r\n                                    <div className=\"card p-3 border\">\r\n                                        <label>{question.label}</label>\r\n                                        {question.type === 'textbox' && (\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                className=\"form-control\"\r\n                                                placeholder={question.placeholder}\r\n                                                onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n                                            />\r\n                                        )}\r\n                                        {question.type === 'email' && (\r\n                                            <input\r\n                                                type=\"email\"\r\n                                                className=\"form-control\"\r\n                                                placeholder={question.placeholder}\r\n                                                onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n                                            />\r\n                                        )}\r\n                                        {question.type === 'date' && (\r\n                                            <input\r\n                                                type=\"date\"\r\n                                                className=\"form-control\"\r\n                                                onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n                                            />\r\n                                        )}\r\n                                        {question.type === 'radio' && question.options.map(option => (\r\n                                            <div key={option.id}>\r\n                                                <input\r\n                                                    type=\"radio\"\r\n                                                    name={question.fieldId}\r\n                                                    value={option.label}\r\n                                                    onChange={() => handleChange(question.fieldId, option.label)}\r\n                                                />\r\n                                                <label>{option.label}</label>\r\n                                            </div>\r\n                                        ))}\r\n                                        {question.type === 'checkbox' && question.options.map(option => (\r\n                                            <div key={option.id}>\r\n                                                <input\r\n                                                    type=\"checkbox\"\r\n                                                    name={question.fieldId}\r\n                                                    value={option.label}\r\n                                                    onChange={(e) => {\r\n                                                        const currentAnswers = answers[question.fieldId] || [];\r\n                                                        if (e.target.checked) {\r\n                                                            handleChange(question.fieldId, [...currentAnswers, option.label]);\r\n                                                        } else {\r\n                                                            handleChange(question.fieldId, currentAnswers.filter(item => item !== option.label));\r\n                                                        }\r\n                                                    }}\r\n                                                />\r\n                                                <label>{option.label}</label>\r\n                                            </div>\r\n                                        ))}\r\n                                        {question.type === 'selectbox' && (\r\n                                            <select\r\n                                                className=\"form-control\"\r\n                                                onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n                                            >\r\n                                                <option value=\"\">{question.placeholder}</option>\r\n                                                {question.options.map(option => (\r\n                                                    <option key={option.id} value={option.label}>{option.label}</option>\r\n                                                ))}\r\n                                            </select>\r\n                                        )}\r\n                                        {question.type === 'textarea' && (\r\n                                            <textarea\r\n                                                className=\"form-control\"\r\n                                                placeholder={question.placeholder}\r\n                                                onChange={(e) => handleChange(question.fieldId, e.target.value)}\r\n                                                \r\n                                            />\r\n                                        )}\r\n                                        {errors[question.fieldId] && (\r\n                                            <div className=\"text-danger mt-2\">{errors[question.fieldId]}</div>\r\n                                        )}\r\n                                    </div>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            ))}\r\n            <div className=\"text-center mt-4\">\r\n                <button className=\"btn btn-primary\" onClick={handleSubmit}>Submit</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default OnePagePerSection;\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}